{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"IBM AR Business Card \u00b6 Welcome \u00b6 Welcome to IBM AR Business Card's Appendices and Documentation. Here are a list of shortcuts: User Manual Deployment Manual API Documentation Bi-Weekly Reports and Demo Card Downloads View this documentation in a new tab Download or View the Application \u00b6 Flutter Mobile App - Download for Android (*.apk) - More Releases - Alternative onedrive link Vue Web Dashboard - http://ar-card.henryz.cc/app You can use the demo accounts listed below (use email and password to login): Username Email Password jonmcnamara john@ucl.ac.uk password amy-pajak amy@ucl.ac.uk password ben-jones ben@ucl.ac.uk password Useful Links \u00b6 Backend Server Address - http://ar-card.henryz.cc:8080 MongoDB Management - Mongo Express (8888) Github Repositories - https://github.com/IBM-AR-CARD Business Card and Image target Demo \u00b6 To demonstrate the use of AR and QR code scanning, you can download the following image target. You could print them out as business cards, or display them on another device (such as iPad or another phone). The file contain the QR code and business card dummy for the 3 demo users. Download the demo for printing (pdf)","title":"Welcome"},{"location":"#ibm-ar-business-card","text":"","title":"IBM AR Business Card"},{"location":"#welcome","text":"Welcome to IBM AR Business Card's Appendices and Documentation. Here are a list of shortcuts: User Manual Deployment Manual API Documentation Bi-Weekly Reports and Demo Card Downloads View this documentation in a new tab","title":"Welcome"},{"location":"#download-or-view-the-application","text":"Flutter Mobile App - Download for Android (*.apk) - More Releases - Alternative onedrive link Vue Web Dashboard - http://ar-card.henryz.cc/app You can use the demo accounts listed below (use email and password to login): Username Email Password jonmcnamara john@ucl.ac.uk password amy-pajak amy@ucl.ac.uk password ben-jones ben@ucl.ac.uk password","title":"Download or View the Application"},{"location":"#useful-links","text":"Backend Server Address - http://ar-card.henryz.cc:8080 MongoDB Management - Mongo Express (8888) Github Repositories - https://github.com/IBM-AR-CARD","title":"Useful Links"},{"location":"#business-card-and-image-target-demo","text":"To demonstrate the use of AR and QR code scanning, you can download the following image target. You could print them out as business cards, or display them on another device (such as iPad or another phone). The file contain the QR code and business card dummy for the 3 demo users. Download the demo for printing (pdf)","title":"Business Card and Image target Demo"},{"location":"Authentication/","text":"User Authentication \u00b6 Overview \u00b6 We uses JWT (Json Web Token) for user login and authentications. A JWT token will be assigned to the client after the login request, the token is persistent unless the user log out manually. The token will be stored in the database, up to 2 tokens can be generated, thus it means the user can sign in to 2 different devices (e.g. web and mobile) at the same time. If additional device is logged in, the oldest token will be automatically invalidated, thus the first device would be automatically logged out. The user can access logout-all endpoint to invalidate all tokens at once, achieving logging out of all devices. The client application should be able to handle the invalid token. That's to say, when any request that requires authorization returned 401 Unauthorized , the app should immediately abandon any further request and perform logout on the device, then prompt the user to log in again. Authorization Header Every user specific requests (e.g. logout, update profile, access favourites) would requrie the JWT Token be passed as authorization in the request header. With key - Authorization and value - Bearer <JWT-Token> , example below. Key Value Authorization Bearer <JWT-Token> JWT-Token should look like (with Bearer ): Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1ZTM0ODQ2YzllMjcxNTEwMmQyNDZiOWMiLCJpYXQiOjE1ODA1MjIzMzR9.2kafsTdABIemwiQN-sDfmHbdkOmPkz8fj_n_qGpxYKg User Registration \u00b6 POST - /user/register \u00b6 Use this request to register a new user. Request Body : { \"username\" : String , // min length 3, max length 25 \"email\" : String , \"password\" : String // min length 5, max length 25 } Key Type Description Constraints Default Required username string Unique username. min length 3, max length 25 N/A Yes email string Unique E-mail. Different from contact e-mail Email format N/A Yes password string Plain text password min length 5, max length 25 N/A Yes Success The user can be registered. Status Code : 200 OK Response Body : { \"success\" : \"Successfully regisered, you can now log in.\" } Key Type Description success string Success message Invalid credentials Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } User Login \u00b6 POST - /user/login \u00b6 Use this request to login an existing user. Request Body : { \"email\" : String , \"password\" : String } Key Type Description Constraints Default Required email string Unique E-mail. Different from contact e-mail Email format N/A Yes password string Plain text password min length 5, max length 25 N/A Yes Success The user can be logged in. Status Code : 200 OK Response Body : { \"success\" : \"Successfully logged in.\" , \"_id\" : \"<User ID>\" , \"token\" : \"<JWT Token>\" } Key Type Description success string Success message _id string User ID token string JWT Token of the user, this token is persistent Invalid credentials Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } User Logout \u00b6 POST - /user/logout \u00b6 Use this request to logout an existing user. This will invalidate the JWT token passed. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Request Body : None Success The user can be logged out. Status Code : 200 OK Response Body : { \"success\" : \"You are logged out\" } Key Type Description success string Success message Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" } POST - /user/logout-all \u00b6 Use this request to logout all devices of an existing user. This will invalidate ALL JWT tokens stored in the server. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Request Body : None Success The user can be logged out. Status Code : 200 OK Response Body : { \"success\" : \"You are logged out of all devices\" } Key Type Description success string Success message Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" } JWT Test \u00b6 POST - /user/test-token \u00b6 Test if a token is valid. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Request Body : None Success The token is valid. Status Code : 200 OK Response Body : { \"success\" : \"token valid\" } Key Type Description success string Success message Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" }","title":"User Authentication"},{"location":"Authentication/#user-authentication","text":"","title":"User Authentication"},{"location":"Authentication/#overview","text":"We uses JWT (Json Web Token) for user login and authentications. A JWT token will be assigned to the client after the login request, the token is persistent unless the user log out manually. The token will be stored in the database, up to 2 tokens can be generated, thus it means the user can sign in to 2 different devices (e.g. web and mobile) at the same time. If additional device is logged in, the oldest token will be automatically invalidated, thus the first device would be automatically logged out. The user can access logout-all endpoint to invalidate all tokens at once, achieving logging out of all devices. The client application should be able to handle the invalid token. That's to say, when any request that requires authorization returned 401 Unauthorized , the app should immediately abandon any further request and perform logout on the device, then prompt the user to log in again. Authorization Header Every user specific requests (e.g. logout, update profile, access favourites) would requrie the JWT Token be passed as authorization in the request header. With key - Authorization and value - Bearer <JWT-Token> , example below. Key Value Authorization Bearer <JWT-Token> JWT-Token should look like (with Bearer ): Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1ZTM0ODQ2YzllMjcxNTEwMmQyNDZiOWMiLCJpYXQiOjE1ODA1MjIzMzR9.2kafsTdABIemwiQN-sDfmHbdkOmPkz8fj_n_qGpxYKg","title":"Overview"},{"location":"Authentication/#user-registration","text":"","title":"User Registration"},{"location":"Authentication/#post-userregister","text":"Use this request to register a new user. Request Body : { \"username\" : String , // min length 3, max length 25 \"email\" : String , \"password\" : String // min length 5, max length 25 } Key Type Description Constraints Default Required username string Unique username. min length 3, max length 25 N/A Yes email string Unique E-mail. Different from contact e-mail Email format N/A Yes password string Plain text password min length 5, max length 25 N/A Yes Success The user can be registered. Status Code : 200 OK Response Body : { \"success\" : \"Successfully regisered, you can now log in.\" } Key Type Description success string Success message Invalid credentials Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" }","title":"POST - /user/register"},{"location":"Authentication/#user-login","text":"","title":"User Login"},{"location":"Authentication/#post-userlogin","text":"Use this request to login an existing user. Request Body : { \"email\" : String , \"password\" : String } Key Type Description Constraints Default Required email string Unique E-mail. Different from contact e-mail Email format N/A Yes password string Plain text password min length 5, max length 25 N/A Yes Success The user can be logged in. Status Code : 200 OK Response Body : { \"success\" : \"Successfully logged in.\" , \"_id\" : \"<User ID>\" , \"token\" : \"<JWT Token>\" } Key Type Description success string Success message _id string User ID token string JWT Token of the user, this token is persistent Invalid credentials Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" }","title":"POST - /user/login"},{"location":"Authentication/#user-logout","text":"","title":"User Logout"},{"location":"Authentication/#post-userlogout","text":"Use this request to logout an existing user. This will invalidate the JWT token passed. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Request Body : None Success The user can be logged out. Status Code : 200 OK Response Body : { \"success\" : \"You are logged out\" } Key Type Description success string Success message Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" }","title":"POST - /user/logout"},{"location":"Authentication/#post-userlogout-all","text":"Use this request to logout all devices of an existing user. This will invalidate ALL JWT tokens stored in the server. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Request Body : None Success The user can be logged out. Status Code : 200 OK Response Body : { \"success\" : \"You are logged out of all devices\" } Key Type Description success string Success message Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" }","title":"POST - /user/logout-all"},{"location":"Authentication/#jwt-test","text":"","title":"JWT Test"},{"location":"Authentication/#post-usertest-token","text":"Test if a token is valid. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Request Body : None Success The token is valid. Status Code : 200 OK Response Body : { \"success\" : \"token valid\" } Key Type Description success string Success message Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" }","title":"POST - /user/test-token"},{"location":"Conversation-API/","text":"User Chat Conversation API \u00b6 This endpoint handles the conversation and natural language processing from the front-end, Watson Assitant is used here to understand and classify the question user ask. The raw question acquired from front-end speech to text would be passed into Watson, Watson would then return the response type or response text back after processing, the backend would then process the information from Watson again to add user profile and finally send back to the client. Get question response \u00b6 POST - /chat \u00b6 Use this request to send a question and get the response. Query Parameter(s) : none Request Body : { \"userid\" : String , \"content\" : String , \"senderUsername\" : String } Key Type Description Constraints Default Required userid string MongoDb ObjectID of the profile the user is chatting (asking question) to MongoDb ObjectID Type N/A Yes content string The question content N/A N/A Yes senderUsername string The username of the sender, for record purposes. Leave null if no user is logged in. N/A N/A Yes Success The history can be added. Status Code : 200 OK Response Body : { \"type\" : \"<`text`, `audio`, `image` or `url`>\" , \"content\" : \"<String of content type>\" } Key Type Description type string One of text , audio , image or url content string String of content type Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" }","title":"Chat Conversation API"},{"location":"Conversation-API/#user-chat-conversation-api","text":"This endpoint handles the conversation and natural language processing from the front-end, Watson Assitant is used here to understand and classify the question user ask. The raw question acquired from front-end speech to text would be passed into Watson, Watson would then return the response type or response text back after processing, the backend would then process the information from Watson again to add user profile and finally send back to the client.","title":"User Chat Conversation API"},{"location":"Conversation-API/#get-question-response","text":"","title":"Get question response"},{"location":"Conversation-API/#post-chat","text":"Use this request to send a question and get the response. Query Parameter(s) : none Request Body : { \"userid\" : String , \"content\" : String , \"senderUsername\" : String } Key Type Description Constraints Default Required userid string MongoDb ObjectID of the profile the user is chatting (asking question) to MongoDb ObjectID Type N/A Yes content string The question content N/A N/A Yes senderUsername string The username of the sender, for record purposes. Leave null if no user is logged in. N/A N/A Yes Success The history can be added. Status Code : 200 OK Response Body : { \"type\" : \"<`text`, `audio`, `image` or `url`>\" , \"content\" : \"<String of content type>\" } Key Type Description type string One of text , audio , image or url content string String of content type Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" }","title":"POST - /chat"},{"location":"Create-Data/","text":"Create Server Dummy Data \u00b6 Create Basic User Profile \u00b6 Replace with your server address and port, run the following URL in your browser or postman: http://${SERVER_ADDRESS}:${PORT}/generate/profile/ You should see SUCCESS . This request will generate 3 predefined user profiles (with username : jonmcnamara , amy-pajak , ben-jones respectively). Their login credentials are: Username Email Password jonmcnamara john@ucl.ac.uk password amy-pajak amy@ucl.ac.uk password ben-jones ben@ucl.ac.uk password Note To use the demo feature in the app or any dummy profile queried by the usernames above, you must generate it using this request first Create History and Favourite Dummy \u00b6 Replace with your server address and port, and userid of the user to create dummy data with, run the following URL in your browser or postman: For history: http://${SERVER_ADDRESS}:${PORT}/generate/history?_id=${USER_ID} For favourites: http://${SERVER_ADDRESS}:${PORT}/generate/favorite?_id=${USER_ID} You should see SUCCESS . This will create 6 more randomly generated users, and add them all in to the user's history or favourite list. Warning This will overwrite the user's history or favourite list, this should only be used for development purposes. Remove All Dummy data \u00b6 Replace with your server address and port, run the following URL in your browser or postman: http://${SERVER_ADDRESS}:${PORT}/generate/clear-dummy/ This will clear all dummy user, dummy history, dummy favorites.","title":"Create Data"},{"location":"Create-Data/#create-server-dummy-data","text":"","title":"Create Server Dummy Data"},{"location":"Create-Data/#create-basic-user-profile","text":"Replace with your server address and port, run the following URL in your browser or postman: http://${SERVER_ADDRESS}:${PORT}/generate/profile/ You should see SUCCESS . This request will generate 3 predefined user profiles (with username : jonmcnamara , amy-pajak , ben-jones respectively). Their login credentials are: Username Email Password jonmcnamara john@ucl.ac.uk password amy-pajak amy@ucl.ac.uk password ben-jones ben@ucl.ac.uk password Note To use the demo feature in the app or any dummy profile queried by the usernames above, you must generate it using this request first","title":"Create Basic User Profile"},{"location":"Create-Data/#create-history-and-favourite-dummy","text":"Replace with your server address and port, and userid of the user to create dummy data with, run the following URL in your browser or postman: For history: http://${SERVER_ADDRESS}:${PORT}/generate/history?_id=${USER_ID} For favourites: http://${SERVER_ADDRESS}:${PORT}/generate/favorite?_id=${USER_ID} You should see SUCCESS . This will create 6 more randomly generated users, and add them all in to the user's history or favourite list. Warning This will overwrite the user's history or favourite list, this should only be used for development purposes.","title":"Create History and Favourite Dummy"},{"location":"Create-Data/#remove-all-dummy-data","text":"Replace with your server address and port, run the following URL in your browser or postman: http://${SERVER_ADDRESS}:${PORT}/generate/clear-dummy/ This will clear all dummy user, dummy history, dummy favorites.","title":"Remove All Dummy data"},{"location":"Deploy-Express/","text":"Deploy Node.js and Express Server \u00b6 Install Node.js \u00b6 If you already install Node.js please jump to Clone from Github Download Node and Npm \u00b6 Download your prefer version of Node.js Check that you have node and npm installed \u00b6 To check if you have Node.js installed, run this command in your terminal: node -v To confirm that you have npm installed you can run this command in your terminal: npm -v Clone from Github \u00b6 clone the repository by runnning: git clone https://github.com/IBM-AR-CARD/Backend-API.git now navigate to the project cd Backend-API Config your backend server \u00b6 Make a copy of the default environment file .env.default then rename the file to .env . Open the .env you just created, complete the config the save it. Warning Please correctly config the Watson Assistant, and paste the correct WATSON_KEY and WATSON_ASSISTANT_ID into the .env file. We have attached our Watson Config Key and ID into the submission. Please also note that UPLOAD_FOLDER should be publically accessible. SERVER_ADDRESS should be the root URL of the server, JWT_KEY can be any arbitrary key for encryption. Run the application \u00b6 Make sure: Your current directory is the backend working directory. MongoDB is correctly installed. You have ran npm install to install all the dependencies. Your .env is correctly configured. Run: node server.js to start the server, once the server has started you will see similar output: App listening on port ${ port } ! You can also use a process manager such as pm2 to run the server persistantly. If you have pm2 installed, you can also use our launch script: ./launch.sh","title":"Deploy Express"},{"location":"Deploy-Express/#deploy-nodejs-and-express-server","text":"","title":"Deploy Node.js and Express Server"},{"location":"Deploy-Express/#install-nodejs","text":"If you already install Node.js please jump to Clone from Github","title":"Install Node.js"},{"location":"Deploy-Express/#download-node-and-npm","text":"Download your prefer version of Node.js","title":"Download Node and Npm"},{"location":"Deploy-Express/#check-that-you-have-node-and-npm-installed","text":"To check if you have Node.js installed, run this command in your terminal: node -v To confirm that you have npm installed you can run this command in your terminal: npm -v","title":"Check that you have node and npm installed"},{"location":"Deploy-Express/#clone-from-github","text":"clone the repository by runnning: git clone https://github.com/IBM-AR-CARD/Backend-API.git now navigate to the project cd Backend-API","title":"Clone from Github"},{"location":"Deploy-Express/#config-your-backend-server","text":"Make a copy of the default environment file .env.default then rename the file to .env . Open the .env you just created, complete the config the save it. Warning Please correctly config the Watson Assistant, and paste the correct WATSON_KEY and WATSON_ASSISTANT_ID into the .env file. We have attached our Watson Config Key and ID into the submission. Please also note that UPLOAD_FOLDER should be publically accessible. SERVER_ADDRESS should be the root URL of the server, JWT_KEY can be any arbitrary key for encryption.","title":"Config your backend server"},{"location":"Deploy-Express/#run-the-application","text":"Make sure: Your current directory is the backend working directory. MongoDB is correctly installed. You have ran npm install to install all the dependencies. Your .env is correctly configured. Run: node server.js to start the server, once the server has started you will see similar output: App listening on port ${ port } ! You can also use a process manager such as pm2 to run the server persistantly. If you have pm2 installed, you can also use our launch script: ./launch.sh","title":"Run the application"},{"location":"Deploy-Flutter/","text":"Install and Deploy Flutter \u00b6 Get the Flutter SDK \u00b6 Select the operating system on which you are installing Flutter: Windows macOs Linux Windows \u00b6 Download the latest flutter SDK Update your path \u00b6 If you wish to run Flutter commands in the regular Windows console, take these steps to add Flutter to the PATH environment variable: From the Start search bar, enter \u2018env\u2019 and select Edit environment variables for your account. Under User variables check if there is an entry called Path: If the entry exists, append the full path to flutter\\bin using ; as a separator from existing values. If the entry doesn\u2019t exist, create a new user variable named Path with the full path to flutter\\bin as its value. Note that you have to close and reopen any existing console windows for these changes to take effect. macOs \u00b6 Download the latest flutter SDK Update your path \u00b6 Add the flutter tool to your path: Determine the directory where you placed the Flutter SDK. You need this in Step 3. Open (or create) the rc file for your shell. For example, macOS Mojave (and earlier) uses the Bash shell by default, so edit $HOME/.bash_profile or $HOME/.bashrc. macOS Catalina uses the Z shell by default, so edit $HOME/.zshrc. If you are using a different shell, the file path and filename will be different on your machine. Add the following line and change [PATH_TO_FLUTTER_GIT_DIRECTORY] to be the path where you cloned Flutter\u2019s git repo: export PATH = \" $PATH :[PATH_TO_FLUTTER_GIT_DIRECTORY]/flutter/bin\" Run source $HOME/.<rc file> to refresh the current window, or open a new terminal window to automatically source the file. Verify that the flutter/bin directory is now in your PATH by running: echo $PATH Verify that the flutter command is available by running: which flutter Linux \u00b6 Download the latest flutter SDK Update your path \u00b6 Add the flutter tool to your path: Determine the directory where you placed the Flutter SDK. You need this in Step 3. Open (or create) the rc file for your shell. For example, macOS Mojave (and earlier) uses the Bash shell by default, so edit $HOME/.bash_profile or $HOME/.bashrc. macOS Catalina uses the Z shell by default, so edit $HOME/.zshrc. If you are using a different shell, the file path and filename will be different on your machine. Add the following line and change [PATH_TO_FLUTTER_GIT_DIRECTORY] to be the path where you cloned Flutter\u2019s git repo: export PATH = \" $PATH :[PATH_TO_FLUTTER_GIT_DIRECTORY]/flutter/bin\" Run source $HOME/.<rc file> to refresh the current window, or open a new terminal window to automatically source the file. Verify that the flutter/bin directory is now in your PATH by running: echo $PATH Verify that the flutter command is available by running: which flutter Run flutter doctor \u00b6 Run the following command to see if there are any dependencies you need to install to complete the setup (for verbose output, add the -v flag): flutter doctor This command checks your environment and displays a report to the terminal window. The Dart SDK is bundled with Flutter; it is not necessary to install Dart separately. Check the output carefully for other software you might need to install or further tasks to perform (shown in bold text). For example: [-] Android toolchain - develop for Android devices \u2022 Android SDK at /Users/obiwan/Library/Android/sdk \u2717 Android SDK is missing command line tools; download from https://goo.gl/XxQghQ \u2022 Try re-installing or updating your Android SDK, visit https://flutter.dev/setup/#android-setup for detailed instructions. The following sections describe how to perform these tasks and finish the setup process. Once you have installed any missing dependencies, you can run the flutter doctor command again to verify that you\u2019ve set everything up correctly. Install Android Studio \u00b6 Download and install Android Studio . Start Android Studio, and go through the \u2018Android Studio Setup Wizard\u2019. This installs the latest Android SDK, Android SDK Command-line Tools, and Android SDK Build-Tools, which are required by Flutter when developing for Android. Set up your Android device \u00b6 To prepare to run and test your Flutter app on an Android device, you\u2019ll need an Android device running Android 4.1 (API level 16) or higher. Enable Developer options and USB debugging on your device. Detailed instructions are available in the Android documentation . Windows-only: Install the Google USB Driver . Using a USB cable, plug your phone into your computer. If prompted on your device, authorize your computer to access your device. In the terminal, run the flutter devices command to verify that Flutter recognizes your connected Android device. By default, Flutter uses the version of the Android SDK where your adb tool is based. If you want Flutter to use a different installation of the Android SDK, you must set the ANDROID_HOME environment variable to that installation directory. Build the application \u00b6 Clone latest version from Github: git clone https://github.com/IBM-AR-CARD/Flutter-AR-Mobile-App.git Make sure you current dirctory is Flutter-AR-Mobile-App Run it on your phone \u00b6 in order to get latest flutter package. Run the following command: flutter pub get Connect to your phone into computer. run: flutter run To install the application into your phone Build the project to apk \u00b6 in order to get latest flutter package. Run the following command: flutter pub get To build the project into apk: flutter build apk --profile if success you will see the follow output: \u221a Built build \\a pp \\o utputs \\a pk \\r elease \\a pp-release.apk ( 303 .2MB ) . which specifies the location of the application. Instruction reference from https://flutter.dev/docs/get-started/install","title":"Deploy Flutter"},{"location":"Deploy-Flutter/#install-and-deploy-flutter","text":"","title":"Install and Deploy Flutter"},{"location":"Deploy-Flutter/#get-the-flutter-sdk","text":"Select the operating system on which you are installing Flutter: Windows macOs Linux","title":"Get the Flutter SDK"},{"location":"Deploy-Flutter/#windows","text":"Download the latest flutter SDK","title":"Windows"},{"location":"Deploy-Flutter/#update-your-path","text":"If you wish to run Flutter commands in the regular Windows console, take these steps to add Flutter to the PATH environment variable: From the Start search bar, enter \u2018env\u2019 and select Edit environment variables for your account. Under User variables check if there is an entry called Path: If the entry exists, append the full path to flutter\\bin using ; as a separator from existing values. If the entry doesn\u2019t exist, create a new user variable named Path with the full path to flutter\\bin as its value. Note that you have to close and reopen any existing console windows for these changes to take effect.","title":"Update your path"},{"location":"Deploy-Flutter/#macos","text":"Download the latest flutter SDK","title":"macOs"},{"location":"Deploy-Flutter/#update-your-path_1","text":"Add the flutter tool to your path: Determine the directory where you placed the Flutter SDK. You need this in Step 3. Open (or create) the rc file for your shell. For example, macOS Mojave (and earlier) uses the Bash shell by default, so edit $HOME/.bash_profile or $HOME/.bashrc. macOS Catalina uses the Z shell by default, so edit $HOME/.zshrc. If you are using a different shell, the file path and filename will be different on your machine. Add the following line and change [PATH_TO_FLUTTER_GIT_DIRECTORY] to be the path where you cloned Flutter\u2019s git repo: export PATH = \" $PATH :[PATH_TO_FLUTTER_GIT_DIRECTORY]/flutter/bin\" Run source $HOME/.<rc file> to refresh the current window, or open a new terminal window to automatically source the file. Verify that the flutter/bin directory is now in your PATH by running: echo $PATH Verify that the flutter command is available by running: which flutter","title":"Update your path"},{"location":"Deploy-Flutter/#linux","text":"Download the latest flutter SDK","title":"Linux"},{"location":"Deploy-Flutter/#update-your-path_2","text":"Add the flutter tool to your path: Determine the directory where you placed the Flutter SDK. You need this in Step 3. Open (or create) the rc file for your shell. For example, macOS Mojave (and earlier) uses the Bash shell by default, so edit $HOME/.bash_profile or $HOME/.bashrc. macOS Catalina uses the Z shell by default, so edit $HOME/.zshrc. If you are using a different shell, the file path and filename will be different on your machine. Add the following line and change [PATH_TO_FLUTTER_GIT_DIRECTORY] to be the path where you cloned Flutter\u2019s git repo: export PATH = \" $PATH :[PATH_TO_FLUTTER_GIT_DIRECTORY]/flutter/bin\" Run source $HOME/.<rc file> to refresh the current window, or open a new terminal window to automatically source the file. Verify that the flutter/bin directory is now in your PATH by running: echo $PATH Verify that the flutter command is available by running: which flutter","title":"Update your path"},{"location":"Deploy-Flutter/#run-flutter-doctor","text":"Run the following command to see if there are any dependencies you need to install to complete the setup (for verbose output, add the -v flag): flutter doctor This command checks your environment and displays a report to the terminal window. The Dart SDK is bundled with Flutter; it is not necessary to install Dart separately. Check the output carefully for other software you might need to install or further tasks to perform (shown in bold text). For example: [-] Android toolchain - develop for Android devices \u2022 Android SDK at /Users/obiwan/Library/Android/sdk \u2717 Android SDK is missing command line tools; download from https://goo.gl/XxQghQ \u2022 Try re-installing or updating your Android SDK, visit https://flutter.dev/setup/#android-setup for detailed instructions. The following sections describe how to perform these tasks and finish the setup process. Once you have installed any missing dependencies, you can run the flutter doctor command again to verify that you\u2019ve set everything up correctly.","title":"Run flutter doctor"},{"location":"Deploy-Flutter/#install-android-studio","text":"Download and install Android Studio . Start Android Studio, and go through the \u2018Android Studio Setup Wizard\u2019. This installs the latest Android SDK, Android SDK Command-line Tools, and Android SDK Build-Tools, which are required by Flutter when developing for Android.","title":"Install Android Studio"},{"location":"Deploy-Flutter/#set-up-your-android-device","text":"To prepare to run and test your Flutter app on an Android device, you\u2019ll need an Android device running Android 4.1 (API level 16) or higher. Enable Developer options and USB debugging on your device. Detailed instructions are available in the Android documentation . Windows-only: Install the Google USB Driver . Using a USB cable, plug your phone into your computer. If prompted on your device, authorize your computer to access your device. In the terminal, run the flutter devices command to verify that Flutter recognizes your connected Android device. By default, Flutter uses the version of the Android SDK where your adb tool is based. If you want Flutter to use a different installation of the Android SDK, you must set the ANDROID_HOME environment variable to that installation directory.","title":"Set up your Android device"},{"location":"Deploy-Flutter/#build-the-application","text":"Clone latest version from Github: git clone https://github.com/IBM-AR-CARD/Flutter-AR-Mobile-App.git Make sure you current dirctory is Flutter-AR-Mobile-App","title":"Build the application"},{"location":"Deploy-Flutter/#run-it-on-your-phone","text":"in order to get latest flutter package. Run the following command: flutter pub get Connect to your phone into computer. run: flutter run To install the application into your phone","title":"Run it on your phone"},{"location":"Deploy-Flutter/#build-the-project-to-apk","text":"in order to get latest flutter package. Run the following command: flutter pub get To build the project into apk: flutter build apk --profile if success you will see the follow output: \u221a Built build \\a pp \\o utputs \\a pk \\r elease \\a pp-release.apk ( 303 .2MB ) . which specifies the location of the application. Instruction reference from https://flutter.dev/docs/get-started/install","title":"Build the project to apk"},{"location":"Deploy-MongoDb/","text":"Deploy mongoDB \u00b6 Select the operating system on which you are installing MongoDB: Linux macOS Windows Linux \u00b6 This instruction is for Ubuntu only if your are other than Ubuntu, please follow the instruction from official website Install MongoDB Community Edition \u00b6 Follow these steps to install MongoDB Community Edition using the apt package manager. 1. Import the public key used by the package management system. \u00b6 From a terminal, issue the following command to import the MongoDB public GPG Key from https://www.mongodb.org/static/pgp/server-4.2.asc : wget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add - The operation should respond with an OK. However, if you receive an error indicating that gnupg is not installed, you can: Install gnupg and its required libraries using the following command: sudo apt-get install gnupg Once installed, retry importing the key: wget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add - 2. Create a list file for MongoDB. \u00b6 Create the list file /etc/apt/sources.list.d/mongodb-org-4.2.list for your version of Ubuntu. Choose the appropriate option for your version of Ubuntu. If you are unsure of what Ubuntu version the host is running, open a terminal or shell on the host and execute lsb_release -dc. Ubuntu 18.04 (Bionic) Create the /etc/apt/sources.list.d/mongodb-org-4.2.list file for Ubuntu 18.04 (Bionic): echo \"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.2 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.2.list Create the /etc/apt/sources.list.d/mongodb-org-4.2.list file for Ubuntu 16.04 (Xenial): echo \"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/4.2 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.2.list 3. Reload local package database. \u00b6 Issue the following command to reload the local package database: sudo apt-get update 3. Install the MongoDB packages. \u00b6 To install the latest stable version, issue the following: sudo apt-get install -y mongodb-org Optional. Although you can specify any available version of MongoDB, apt-get will upgrade the packages when a newer version becomes available. To prevent unintended upgrades, you can pin the package at the currently installed version: echo \"mongodb-org hold\" | sudo dpkg --set-selections echo \"mongodb-org-server hold\" | sudo dpkg --set-selections echo \"mongodb-org-shell hold\" | sudo dpkg --set-selections echo \"mongodb-org-mongos hold\" | sudo dpkg --set-selections echo \"mongodb-org-tools hold\" | sudo dpkg --set-selections Run MongoDB Community Edition \u00b6 1. Start MongoDB. \u00b6 You can start the mongod process by issuing the following command: sudo systemctl start mongod If you receive an error similar to the following when starting mongod: Failed to start mongod.service: Unit mongod.service not found. Run the following command first: sudo systemctl daemon-reload Then run the start command above again. 2. Verify that MongoDB has started successfully. \u00b6 sudo systemctl status mongod You can optionally ensure that MongoDB will start following a system reboot by issuing the following command: sudo systemctl enable mongod 3. Stop MongoDB \u00b6 As needed, you can stop the mongod process by issuing the following command: sudo systemctl stop mongod 4. Restart MongoDB. \u00b6 You can restart the mongod process by issuing the following command: sudo systemctl restart mongod You can follow the state of the process for errors or important messages by watching the output in the /var/log/mongodb/mongod.log file. ref: https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/#create-a-list-file-for-mongodb macOS \u00b6 Install MongoDB Community Edition \u00b6 Prerequisites \u00b6 If you have the Homebrew brew package installed on your OSX host and you have previously tapped the official MongoDB Homebrew Tap , skip the prerequisites and go to the Procedure step. Install XCode \u00b6 Apple\u2019s XCode includes command-line tools that are required by brew, and is available for free on the App Store. Make sure you are running the latest version. Install Homebrew \u00b6 OSX does not include the Homebrew brew package by default. Install brew using the official instructions . Tap the MongoDB Homebrew Tap \u00b6 Issue the following from the terminal to tap the official MongoDB Homebrew Tap : brew tap mongodb/brew Procedure \u00b6 Follow these steps to install MongoDB Community Edition using the third-party brew package manager. From a terminal, issue the following: brew install mongodb-community@4.2 Run MongoDB Community Edition \u00b6 Follow these steps to run MongoDB Community Edition. These instructions assume that you are using the default settings. You can run MongoDB as a macOS service using brew, or you can run MongoDB manually as a background process. It is recommended to run MongoDB as a macOS service, as doing so sets the correct system ulimit values automatically (see ulimit settings for more information). To run MongoDB (i.e. the mongod process) as a macOS service, issue the following: brew services start mongodb-community@4.2 To run MongoDB manually as a background process, issue the following: mongod --config /usr/local/etc/mongod.conf --fork Both methods use the /usr/local/etc/mongod.conf file created during the install. You can add your own MongoDB configuration options to this file as well. To verify that MongoDB is running, search for mongod in your running processes: ps aux | grep -v grep | grep mongod You can also view the log file to see the current status of your mongod process: /usr/local/var/log/mongodb/mongo.log. Connect and Use MongoDB \u00b6 To begin using MongoDB, connect a mongo shell to the running instance. From a new terminal, issue the following: mongo ref: https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/ Windows \u00b6 Install MongoDB Community Edition \u00b6 Prerequisites \u00b6 Users on Windows versions previous to Windows 10 must install the following update before installing MongoDB: Update for Universal C Runtime for Windows Users on Windows 10, Server 2016 and Server 2019 do not need this update. Procedure \u00b6 Follow these steps to install MongoDB Community Edition using the MongoDB Installer wizard. The installation process installs both the MongoDB binaries as well as the default configuration file \\ \\bin\\mongod.cfg. Download MongoDB Community Edition. Download the installer (.msi) from the MongoDB Download Center : The Download Center should display MongoDB Community Server download information. If not, select Server , then click the MongoDB Community Server tab. In the Version dropdown, select the version that corresponds to the latest MongoDB Server 4.2. In the OS dropdown, Windows 64-bit X64 should be selected. In the Package drop down, MSI should be selected. Click Download . Run the MongoDB installer. For example, from the Windows Explorer/File Explorer: Go to the directory where you downloaded the MongoDB installer ( .msi file). By default, this is your Downloads directory. Double-click the .msi file. Follow the MongoDB Community Edition installation wizard. The wizard steps you through the installation of MongoDB and MongoDB Compass. a. Choose Setup Type \u00b6 You can choose either the Complete (recommended for most users) or Custom setup type. The Complete setup option installs MongoDB and the MongoDB tools to the default location. The Custom setup option allows you to specify which executables are installed and where. b. Service Configuration \u00b6 Starting in MongoDB 4.0, you can set up MongoDB as a Windows service during the install or just install the binaries. MongoDB Service MongoDB MongoDB Service \u00b6 The following installs and configures MongoDB as a Windows service. Starting in MongoDB 4.0, you can configure and start MongoDB as a Windows service during the install, and the MongoDB service is started upon successful installation. Select Install MongoD as a Service MongoDB as a service. Select either: Run the service as Network Service user (Default) This is a Windows user account that is built-in to Windows or Run the service as a local or domain user For an existing local user account, specify a period (i.e. .) for the Account Domain and specify the Account Name and the Account Password for the user. For an existing domain user, specify the Account Domain , the Account Name and the Account Password for that user. Service Name . Specify the service name. Default name is MongoDB . If you already have a service with the specified name, you must choose another name. Data Directory . Specify the data directory, which corresponds to the --dbpath . If the directory does not exist, the installer will create the directory and sets the directory access to the service user. Log Directory . Specify the Log directory, which corresponds to the --logpath. If the directory does not exist, the installer will create the directory and sets the directory access to the service user. MongoDB \u00b6 The following installs MongoDB only and does not configure MongoDB as a Windows service. If you choose not to configure MongoDB as a Windows service, uncheck the Install MongoD as a Service . c. Install MongoDB Compass \u00b6 For Windows 8 or greater, you can have the wizard install MongoDB Compass . To install Compass, select Install MongoDB Compass (Default). d. When ready, click Install. \u00b6 If You Installed MongoDB as a Windows Service \u00b6 The MongoDB service is started upon successful installation To begin using MongoDB, connect a mongo.exe shell to the running MongoDB instance. Either: From Windows Explorer/File Explorer, go to C:\\Program Files\\MongoDB\\Server\\4.2\\bin\\ directory and double-click on mongo.exe. Or, open a Command Interpreter with Administrative privileges and run: C: \\P rogram Files \\M ongoDB \\S erver \\4 .2 \\b in \\m ongo.exe If You Did Not Install MongoDB as a Windows Service \u00b6 If you only installed the executables and did not install MongoDB as a Windows service, you must manually start the MongoDB instance. See Run MongoDB Community Edition from the Command Interpreter for instructions to start a MongoDB instance. Run MongoDB Community Edition as a Windows Service \u00b6 Starting in version 4.0, you can install and configure MongoDB as a Windows Service during the install, and the MongoDB service is started upon successful installation. MongoDB is configured using the configuration file \\ \\bin\\mongod.cfg . Start MongoDB Community Edition as a Windows Service \u00b6 To start/restart the MongoDB service, use the Services console: From the Services console, locate the MongoDB service. Right-click on the MongoDB service and click Start . To begin using MongoDB, connect a mongo.exe shell to the running MongoDB instance. To connect, open a Command Interpreter with Administrative privileges and run: C: \\P rogram Files \\M ongoDB \\S erver \\4 .2 \\b in \\m ongo.exe Stop MongoDB Community Edition as a Windows Service \u00b6 To stop/pause the MongoDB service, use the Services console: From the Services console, locate the MongoDB service. Right-click on the MongoDB service and click Stop (or Pause ). Remove MongoDB Community Edition as a Windows Service \u00b6 To remove the MongoDB service, first use the Services console to stop the service. Then open a Windows command prompt/interpreter ( cmd.exe ) as an Administrator , and run the following command: sc.exe delete MongoDB Run MongoDB Community Edition from the Command Interpreter \u00b6 You can run MongoDB Community Edition from the Windows command prompt/interpreter ( cmd.exe ) instead of as a service. Open a Windows command prompt/interpreter ( cmd.exe ){target=_blank} as an Administrator . 1. Create database directory. \u00b6 Create the data directory where MongoDB stores data. MongoDB\u2019s default data directory path is the absolute path \\data\\db on the drive from which you start MongoDB. From the Command Interpreter , create the data directories: cd C: \\ md \"\\data\\db\" 2. Start your MongoDB database. \u00b6 To start MongoDB, run mongod.exe . \"C:\\Program Files\\MongoDB\\Server\\4.2\\bin\\mongod.exe\" --dbpath = \"c:\\data\\db\" The --dbpath option points to your database directory. If the MongoDB database server is running correctly, the Command Interpreter displays: [initandlisten] waiting for connections 3. Connect to MongoDB. \u00b6 To connect a mongo.exe shell to the MongoDB instance, open another Command Interpreter with Administrative privileges and run: \"C:\\Program Files\\MongoDB\\Server\\4.2\\bin\\mongo.exe\" ref: https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/","title":"Deploy MongoDB"},{"location":"Deploy-MongoDb/#deploy-mongodb","text":"Select the operating system on which you are installing MongoDB: Linux macOS Windows","title":"Deploy mongoDB"},{"location":"Deploy-MongoDb/#linux","text":"This instruction is for Ubuntu only if your are other than Ubuntu, please follow the instruction from official website","title":"Linux"},{"location":"Deploy-MongoDb/#install-mongodb-community-edition","text":"Follow these steps to install MongoDB Community Edition using the apt package manager.","title":"Install MongoDB Community Edition"},{"location":"Deploy-MongoDb/#1-import-the-public-key-used-by-the-package-management-system","text":"From a terminal, issue the following command to import the MongoDB public GPG Key from https://www.mongodb.org/static/pgp/server-4.2.asc : wget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add - The operation should respond with an OK. However, if you receive an error indicating that gnupg is not installed, you can: Install gnupg and its required libraries using the following command: sudo apt-get install gnupg Once installed, retry importing the key: wget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add -","title":"1. Import the public key used by the package management system."},{"location":"Deploy-MongoDb/#2-create-a-list-file-for-mongodb","text":"Create the list file /etc/apt/sources.list.d/mongodb-org-4.2.list for your version of Ubuntu. Choose the appropriate option for your version of Ubuntu. If you are unsure of what Ubuntu version the host is running, open a terminal or shell on the host and execute lsb_release -dc. Ubuntu 18.04 (Bionic) Create the /etc/apt/sources.list.d/mongodb-org-4.2.list file for Ubuntu 18.04 (Bionic): echo \"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.2 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.2.list Create the /etc/apt/sources.list.d/mongodb-org-4.2.list file for Ubuntu 16.04 (Xenial): echo \"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/4.2 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.2.list","title":"2. Create a list file for MongoDB."},{"location":"Deploy-MongoDb/#3-reload-local-package-database","text":"Issue the following command to reload the local package database: sudo apt-get update","title":"3. Reload local package database."},{"location":"Deploy-MongoDb/#3-install-the-mongodb-packages","text":"To install the latest stable version, issue the following: sudo apt-get install -y mongodb-org Optional. Although you can specify any available version of MongoDB, apt-get will upgrade the packages when a newer version becomes available. To prevent unintended upgrades, you can pin the package at the currently installed version: echo \"mongodb-org hold\" | sudo dpkg --set-selections echo \"mongodb-org-server hold\" | sudo dpkg --set-selections echo \"mongodb-org-shell hold\" | sudo dpkg --set-selections echo \"mongodb-org-mongos hold\" | sudo dpkg --set-selections echo \"mongodb-org-tools hold\" | sudo dpkg --set-selections","title":"3. Install the MongoDB packages."},{"location":"Deploy-MongoDb/#run-mongodb-community-edition","text":"","title":"Run MongoDB Community Edition"},{"location":"Deploy-MongoDb/#1-start-mongodb","text":"You can start the mongod process by issuing the following command: sudo systemctl start mongod If you receive an error similar to the following when starting mongod: Failed to start mongod.service: Unit mongod.service not found. Run the following command first: sudo systemctl daemon-reload Then run the start command above again.","title":"1. Start MongoDB."},{"location":"Deploy-MongoDb/#2-verify-that-mongodb-has-started-successfully","text":"sudo systemctl status mongod You can optionally ensure that MongoDB will start following a system reboot by issuing the following command: sudo systemctl enable mongod","title":"2. Verify that MongoDB has started successfully."},{"location":"Deploy-MongoDb/#3-stop-mongodb","text":"As needed, you can stop the mongod process by issuing the following command: sudo systemctl stop mongod","title":"3. Stop MongoDB"},{"location":"Deploy-MongoDb/#4-restart-mongodb","text":"You can restart the mongod process by issuing the following command: sudo systemctl restart mongod You can follow the state of the process for errors or important messages by watching the output in the /var/log/mongodb/mongod.log file. ref: https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/#create-a-list-file-for-mongodb","title":"4. Restart MongoDB."},{"location":"Deploy-MongoDb/#macos","text":"","title":"macOS"},{"location":"Deploy-MongoDb/#install-mongodb-community-edition_1","text":"","title":"Install MongoDB Community Edition"},{"location":"Deploy-MongoDb/#prerequisites","text":"If you have the Homebrew brew package installed on your OSX host and you have previously tapped the official MongoDB Homebrew Tap , skip the prerequisites and go to the Procedure step.","title":"Prerequisites"},{"location":"Deploy-MongoDb/#install-xcode","text":"Apple\u2019s XCode includes command-line tools that are required by brew, and is available for free on the App Store. Make sure you are running the latest version.","title":"Install XCode"},{"location":"Deploy-MongoDb/#install-homebrew","text":"OSX does not include the Homebrew brew package by default. Install brew using the official instructions .","title":"Install Homebrew"},{"location":"Deploy-MongoDb/#tap-the-mongodb-homebrew-tap","text":"Issue the following from the terminal to tap the official MongoDB Homebrew Tap : brew tap mongodb/brew","title":"Tap the MongoDB Homebrew Tap"},{"location":"Deploy-MongoDb/#procedure","text":"Follow these steps to install MongoDB Community Edition using the third-party brew package manager. From a terminal, issue the following: brew install mongodb-community@4.2","title":"Procedure"},{"location":"Deploy-MongoDb/#run-mongodb-community-edition_1","text":"Follow these steps to run MongoDB Community Edition. These instructions assume that you are using the default settings. You can run MongoDB as a macOS service using brew, or you can run MongoDB manually as a background process. It is recommended to run MongoDB as a macOS service, as doing so sets the correct system ulimit values automatically (see ulimit settings for more information). To run MongoDB (i.e. the mongod process) as a macOS service, issue the following: brew services start mongodb-community@4.2 To run MongoDB manually as a background process, issue the following: mongod --config /usr/local/etc/mongod.conf --fork Both methods use the /usr/local/etc/mongod.conf file created during the install. You can add your own MongoDB configuration options to this file as well. To verify that MongoDB is running, search for mongod in your running processes: ps aux | grep -v grep | grep mongod You can also view the log file to see the current status of your mongod process: /usr/local/var/log/mongodb/mongo.log.","title":"Run MongoDB Community Edition"},{"location":"Deploy-MongoDb/#connect-and-use-mongodb","text":"To begin using MongoDB, connect a mongo shell to the running instance. From a new terminal, issue the following: mongo ref: https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/","title":"Connect and Use MongoDB"},{"location":"Deploy-MongoDb/#windows","text":"","title":"Windows"},{"location":"Deploy-MongoDb/#install-mongodb-community-edition_2","text":"","title":"Install MongoDB Community Edition"},{"location":"Deploy-MongoDb/#prerequisites_1","text":"Users on Windows versions previous to Windows 10 must install the following update before installing MongoDB: Update for Universal C Runtime for Windows Users on Windows 10, Server 2016 and Server 2019 do not need this update.","title":"Prerequisites"},{"location":"Deploy-MongoDb/#procedure_1","text":"Follow these steps to install MongoDB Community Edition using the MongoDB Installer wizard. The installation process installs both the MongoDB binaries as well as the default configuration file \\ \\bin\\mongod.cfg. Download MongoDB Community Edition. Download the installer (.msi) from the MongoDB Download Center : The Download Center should display MongoDB Community Server download information. If not, select Server , then click the MongoDB Community Server tab. In the Version dropdown, select the version that corresponds to the latest MongoDB Server 4.2. In the OS dropdown, Windows 64-bit X64 should be selected. In the Package drop down, MSI should be selected. Click Download . Run the MongoDB installer. For example, from the Windows Explorer/File Explorer: Go to the directory where you downloaded the MongoDB installer ( .msi file). By default, this is your Downloads directory. Double-click the .msi file. Follow the MongoDB Community Edition installation wizard. The wizard steps you through the installation of MongoDB and MongoDB Compass.","title":"Procedure"},{"location":"Deploy-MongoDb/#a-choose-setup-type","text":"You can choose either the Complete (recommended for most users) or Custom setup type. The Complete setup option installs MongoDB and the MongoDB tools to the default location. The Custom setup option allows you to specify which executables are installed and where.","title":"a. Choose Setup Type"},{"location":"Deploy-MongoDb/#b-service-configuration","text":"Starting in MongoDB 4.0, you can set up MongoDB as a Windows service during the install or just install the binaries. MongoDB Service MongoDB","title":"b. Service Configuration"},{"location":"Deploy-MongoDb/#mongodb-service","text":"The following installs and configures MongoDB as a Windows service. Starting in MongoDB 4.0, you can configure and start MongoDB as a Windows service during the install, and the MongoDB service is started upon successful installation. Select Install MongoD as a Service MongoDB as a service. Select either: Run the service as Network Service user (Default) This is a Windows user account that is built-in to Windows or Run the service as a local or domain user For an existing local user account, specify a period (i.e. .) for the Account Domain and specify the Account Name and the Account Password for the user. For an existing domain user, specify the Account Domain , the Account Name and the Account Password for that user. Service Name . Specify the service name. Default name is MongoDB . If you already have a service with the specified name, you must choose another name. Data Directory . Specify the data directory, which corresponds to the --dbpath . If the directory does not exist, the installer will create the directory and sets the directory access to the service user. Log Directory . Specify the Log directory, which corresponds to the --logpath. If the directory does not exist, the installer will create the directory and sets the directory access to the service user.","title":"MongoDB Service"},{"location":"Deploy-MongoDb/#mongodb","text":"The following installs MongoDB only and does not configure MongoDB as a Windows service. If you choose not to configure MongoDB as a Windows service, uncheck the Install MongoD as a Service .","title":"MongoDB"},{"location":"Deploy-MongoDb/#c-install-mongodb-compass","text":"For Windows 8 or greater, you can have the wizard install MongoDB Compass . To install Compass, select Install MongoDB Compass (Default).","title":"c. Install MongoDB Compass"},{"location":"Deploy-MongoDb/#d-when-ready-click-install","text":"","title":"d. When ready, click Install."},{"location":"Deploy-MongoDb/#if-you-installed-mongodb-as-a-windows-service","text":"The MongoDB service is started upon successful installation To begin using MongoDB, connect a mongo.exe shell to the running MongoDB instance. Either: From Windows Explorer/File Explorer, go to C:\\Program Files\\MongoDB\\Server\\4.2\\bin\\ directory and double-click on mongo.exe. Or, open a Command Interpreter with Administrative privileges and run: C: \\P rogram Files \\M ongoDB \\S erver \\4 .2 \\b in \\m ongo.exe","title":"If You Installed MongoDB as a Windows Service"},{"location":"Deploy-MongoDb/#if-you-did-not-install-mongodb-as-a-windows-service","text":"If you only installed the executables and did not install MongoDB as a Windows service, you must manually start the MongoDB instance. See Run MongoDB Community Edition from the Command Interpreter for instructions to start a MongoDB instance.","title":"If You Did Not Install MongoDB as a Windows Service"},{"location":"Deploy-MongoDb/#run-mongodb-community-edition-as-a-windows-service","text":"Starting in version 4.0, you can install and configure MongoDB as a Windows Service during the install, and the MongoDB service is started upon successful installation. MongoDB is configured using the configuration file \\ \\bin\\mongod.cfg .","title":"Run MongoDB Community Edition as a Windows Service"},{"location":"Deploy-MongoDb/#start-mongodb-community-edition-as-a-windows-service","text":"To start/restart the MongoDB service, use the Services console: From the Services console, locate the MongoDB service. Right-click on the MongoDB service and click Start . To begin using MongoDB, connect a mongo.exe shell to the running MongoDB instance. To connect, open a Command Interpreter with Administrative privileges and run: C: \\P rogram Files \\M ongoDB \\S erver \\4 .2 \\b in \\m ongo.exe","title":"Start MongoDB Community Edition as a Windows Service"},{"location":"Deploy-MongoDb/#stop-mongodb-community-edition-as-a-windows-service","text":"To stop/pause the MongoDB service, use the Services console: From the Services console, locate the MongoDB service. Right-click on the MongoDB service and click Stop (or Pause ).","title":"Stop MongoDB Community Edition as a Windows Service"},{"location":"Deploy-MongoDb/#remove-mongodb-community-edition-as-a-windows-service","text":"To remove the MongoDB service, first use the Services console to stop the service. Then open a Windows command prompt/interpreter ( cmd.exe ) as an Administrator , and run the following command: sc.exe delete MongoDB","title":"Remove MongoDB Community Edition as a Windows Service"},{"location":"Deploy-MongoDb/#run-mongodb-community-edition-from-the-command-interpreter","text":"You can run MongoDB Community Edition from the Windows command prompt/interpreter ( cmd.exe ) instead of as a service. Open a Windows command prompt/interpreter ( cmd.exe ){target=_blank} as an Administrator .","title":"Run MongoDB Community Edition from the Command Interpreter"},{"location":"Deploy-MongoDb/#1-create-database-directory","text":"Create the data directory where MongoDB stores data. MongoDB\u2019s default data directory path is the absolute path \\data\\db on the drive from which you start MongoDB. From the Command Interpreter , create the data directories: cd C: \\ md \"\\data\\db\"","title":"1. Create database directory."},{"location":"Deploy-MongoDb/#2-start-your-mongodb-database","text":"To start MongoDB, run mongod.exe . \"C:\\Program Files\\MongoDB\\Server\\4.2\\bin\\mongod.exe\" --dbpath = \"c:\\data\\db\" The --dbpath option points to your database directory. If the MongoDB database server is running correctly, the Command Interpreter displays: [initandlisten] waiting for connections","title":"2. Start your MongoDB database."},{"location":"Deploy-MongoDb/#3-connect-to-mongodb","text":"To connect a mongo.exe shell to the MongoDB instance, open another Command Interpreter with Administrative privileges and run: \"C:\\Program Files\\MongoDB\\Server\\4.2\\bin\\mongo.exe\" ref: https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/","title":"3. Connect to MongoDB."},{"location":"Deploy-Vue/","text":"Install Node.js \u00b6 Download Node and Npm \u00b6 Download your prefer version of Node.js Check that you have node and npm installed \u00b6 To check if you have Node.js installed, run this command in your terminal: node -v To confirm that you have npm installed you can run this command in your terminal: npm -v Install Yarn \u00b6 follow the instruction to install latest version of yarn: https://classic.yarnpkg.com/en/docs/install Test that Yarn is installed by running: yarn --version Install Vue CLI \u00b6 To install the new package, use one of the following commands. You need administrator privileges to execute these unless npm was installed on your system through a Node.js version manager (e.g. n or nvm). npm install -g @vue/cli # OR yarn global add @vue/cli After installation, you will have access to the vue binary in your command line. You can verify that it is properly installed by simply running vue, which should present you with a help message listing all available commands. You can check you have the right version with this command: vue --version Run the following command to install required npm packages: npm install npm install --save vue-router Build Web Application \u00b6 To setup project run: yarn install This will install required package automatically. Run it with hot reload \u00b6 Run the following command if you want the application run it in local with hot reload feature when you modify the code: yarn serve This will serve the website in localhost Build for production \u00b6 Run the following command to compile your virtual DOM to real DOM: yarn build under current directory /dist you will see the compiled files which is ready to put into server.","title":"Deploy Vue"},{"location":"Deploy-Vue/#install-nodejs","text":"","title":"Install Node.js"},{"location":"Deploy-Vue/#download-node-and-npm","text":"Download your prefer version of Node.js","title":"Download Node and Npm"},{"location":"Deploy-Vue/#check-that-you-have-node-and-npm-installed","text":"To check if you have Node.js installed, run this command in your terminal: node -v To confirm that you have npm installed you can run this command in your terminal: npm -v","title":"Check that you have node and npm installed"},{"location":"Deploy-Vue/#install-yarn","text":"follow the instruction to install latest version of yarn: https://classic.yarnpkg.com/en/docs/install Test that Yarn is installed by running: yarn --version","title":"Install Yarn"},{"location":"Deploy-Vue/#install-vue-cli","text":"To install the new package, use one of the following commands. You need administrator privileges to execute these unless npm was installed on your system through a Node.js version manager (e.g. n or nvm). npm install -g @vue/cli # OR yarn global add @vue/cli After installation, you will have access to the vue binary in your command line. You can verify that it is properly installed by simply running vue, which should present you with a help message listing all available commands. You can check you have the right version with this command: vue --version Run the following command to install required npm packages: npm install npm install --save vue-router","title":"Install Vue CLI"},{"location":"Deploy-Vue/#build-web-application","text":"To setup project run: yarn install This will install required package automatically.","title":"Build Web Application"},{"location":"Deploy-Vue/#run-it-with-hot-reload","text":"Run the following command if you want the application run it in local with hot reload feature when you modify the code: yarn serve This will serve the website in localhost","title":"Run it with hot reload"},{"location":"Deploy-Vue/#build-for-production","text":"Run the following command to compile your virtual DOM to real DOM: yarn build under current directory /dist you will see the compiled files which is ready to put into server.","title":"Build for production"},{"location":"Favorite-API/","text":"User Favourite Cards API \u00b6 Get favorite \u00b6 GET - /favorite/get \u00b6 Use this request to return a favorite list of cards the user have scanned. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Query Parameter(s) : none Request Body : none Success The favorite can be returned. Status Code : 200 OK Response Body : { \"_id\" : \"<Favorite Storage ID, not usable>\" , \"userid\" : \"<User ID of the favorite owner>\" , \"list\" : [ { \"_id\" : \"<Favorite item id, with time info>\" , \"name\" : \"<Favorite user name>\" , \"userid\" : \"<Current item user id>\" , \"profile\" : \"<Profile avatar url>\" , \"username\" : \"<Current item user name>\" , }, ... ] } Key Type Description userid string User ID list List List of favorite items Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" } Add to favorite \u00b6 POST - /favorite/add \u00b6 Use this request to add a single item into the user's favorite list. Any existing favorite of this particular id will be overwritten (i.e. only one favorite entry per each user, only newest entry is kept). Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Query Parameter(s) : none Request Body : { userid : string } Key Type Description Constraints Default Required userid string MongoDb ObjectID of the favorite item (an viewed user) to add MongoDb ObjectID Type N/A Yes Success The favorite can be added. Status Code : 200 OK Response Body : { \"success\" : \"favorite updated\" } Key Type Description success string success message Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" } Remove from favorite \u00b6 POST - /favorite/remove \u00b6 Use this request to remove a single entry from the favorite. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Query Parameter(s) : none Request Body : { userid : string } Key Type Description Constraints Default Required userid string MongoDb ObjectID of the favorite item (an viewed user) to remove MongoDb ObjectID Type N/A Yes Success The favorite is removed if the userid provided is correct. Status Code : 200 OK Response Body : { \"success\" : \"favorite might be removed\" } Key Type Description success string success message Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" } POST - /favorite/remove-all \u00b6 Use this request to remove all entries from the favorite list. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Query Parameter(s) : none Request Body : none Success The favorite is cleared. Status Code : 200 OK Response Body : { \"success\" : \"favorite is cleared\" } Key Type Description success string success message Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" }","title":"User Favourite Cards"},{"location":"Favorite-API/#user-favourite-cards-api","text":"","title":"User Favourite Cards API"},{"location":"Favorite-API/#get-favorite","text":"","title":"Get favorite"},{"location":"Favorite-API/#get-favoriteget","text":"Use this request to return a favorite list of cards the user have scanned. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Query Parameter(s) : none Request Body : none Success The favorite can be returned. Status Code : 200 OK Response Body : { \"_id\" : \"<Favorite Storage ID, not usable>\" , \"userid\" : \"<User ID of the favorite owner>\" , \"list\" : [ { \"_id\" : \"<Favorite item id, with time info>\" , \"name\" : \"<Favorite user name>\" , \"userid\" : \"<Current item user id>\" , \"profile\" : \"<Profile avatar url>\" , \"username\" : \"<Current item user name>\" , }, ... ] } Key Type Description userid string User ID list List List of favorite items Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" }","title":"GET - /favorite/get"},{"location":"Favorite-API/#add-to-favorite","text":"","title":"Add to favorite"},{"location":"Favorite-API/#post-favoriteadd","text":"Use this request to add a single item into the user's favorite list. Any existing favorite of this particular id will be overwritten (i.e. only one favorite entry per each user, only newest entry is kept). Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Query Parameter(s) : none Request Body : { userid : string } Key Type Description Constraints Default Required userid string MongoDb ObjectID of the favorite item (an viewed user) to add MongoDb ObjectID Type N/A Yes Success The favorite can be added. Status Code : 200 OK Response Body : { \"success\" : \"favorite updated\" } Key Type Description success string success message Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" }","title":"POST - /favorite/add"},{"location":"Favorite-API/#remove-from-favorite","text":"","title":"Remove from favorite"},{"location":"Favorite-API/#post-favoriteremove","text":"Use this request to remove a single entry from the favorite. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Query Parameter(s) : none Request Body : { userid : string } Key Type Description Constraints Default Required userid string MongoDb ObjectID of the favorite item (an viewed user) to remove MongoDb ObjectID Type N/A Yes Success The favorite is removed if the userid provided is correct. Status Code : 200 OK Response Body : { \"success\" : \"favorite might be removed\" } Key Type Description success string success message Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" }","title":"POST - /favorite/remove"},{"location":"Favorite-API/#post-favoriteremove-all","text":"Use this request to remove all entries from the favorite list. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Query Parameter(s) : none Request Body : none Success The favorite is cleared. Status Code : 200 OK Response Body : { \"success\" : \"favorite is cleared\" } Key Type Description success string success message Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" }","title":"POST - /favorite/remove-all"},{"location":"File-Upload/","text":"File Upload API \u00b6 File upload \u00b6 POST - /upload \u00b6 Upload image or audio file into the backend server. The file will be stored in the user's respective folder. Please name the filename carefully before upload, as this will be the file name stored on the server, file with the same name uploaded by the same user will be overwritten. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Request Body : Please put the raw file into the request body with key file . Key Type Description Constraints Default Required file File Raw File N/A N/A Yes Success The file can be upload. Status Code : 200 OK Response Body : { \"success\" : \"file uploaded\" , \"path\" : \"<Uploaded file URL>\" } Key Type Description success string Success message path string Uploaded file URL Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" } Standard file names \u00b6 The following are the example file names of common files shared between the client and the server. File name Description File type profile.png Image for user's profile picture png education.mp3 User's recording file for their education section mp3 description.mp3 User's recording file for their one sentence description section mp3 work-experience.mp3 User's recording file for their work experiences section mp3","title":"File Upload"},{"location":"File-Upload/#file-upload-api","text":"","title":"File Upload API"},{"location":"File-Upload/#file-upload","text":"","title":"File upload"},{"location":"File-Upload/#post-upload","text":"Upload image or audio file into the backend server. The file will be stored in the user's respective folder. Please name the filename carefully before upload, as this will be the file name stored on the server, file with the same name uploaded by the same user will be overwritten. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Request Body : Please put the raw file into the request body with key file . Key Type Description Constraints Default Required file File Raw File N/A N/A Yes Success The file can be upload. Status Code : 200 OK Response Body : { \"success\" : \"file uploaded\" , \"path\" : \"<Uploaded file URL>\" } Key Type Description success string Success message path string Uploaded file URL Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" }","title":"POST - /upload"},{"location":"File-Upload/#standard-file-names","text":"The following are the example file names of common files shared between the client and the server. File name Description File type profile.png Image for user's profile picture png education.mp3 User's recording file for their education section mp3 description.mp3 User's recording file for their one sentence description section mp3 work-experience.mp3 User's recording file for their work experiences section mp3","title":"Standard file names"},{"location":"Flutter-Manual/","text":"Flutter User Manual \u00b6 Business Card and Image target Demo \u00b6 To demostrate the use of AR and QR code scanning, you can download the following image target. You could print them out as business cards, or display them on another device (such as iPad or another phone). Download the demo for printing (pdf) Download or View the Application \u00b6 Flutter Mobile App - Download for Android (*.apk) - More Releases - Alternative onedrive link Register and Login \u00b6 You can view and interact with AR avatars even without login. However, to have the best user experiences, you should register or login before use. If you are not logged in, in the main page, tap either list or profile button will redirect you to the login page. You can now create your account or loggin to existing account. You can use the demo accounts listed below (use email and password to login): Username Email Password jonmcnamara john@ucl.ac.uk password amy-pajak amy@ucl.ac.uk password ben-jones ben@ucl.ac.uk password When you register, you will be automatically logged in. First Launch \u00b6 Install the APK file on your Android device. Tap the icon to launch the app. You should see three popup asking for camera, microphone and storage permissions. You should agree with all of them, otherwise the app might not run correctly. Info In unlikely event, you might need to relaunch your app after granting part of the permissions. View Avatar \u00b6 In the QR code scanning page, scan the QR code on your business card. Or tap \"demo\" to view the demo card. Info If you do not own an AR business card, you can download it in the Files section of this documentation. You should now enter the AR page. Follow the instruction and scan the back of the business card, you should now see an AR avatar on top of the physical card. If you don't have a phsycial business card for AR tracking, click here to download You can switch between the AR scene and the 3D non-AR scene by toggling the AR button. You can see the user profile page by tapping the profile picture. You can go back by tapping the exit button. Chat \u00b6 Tap the mic icon to speak, You can also for: General Description Work Experience Education Email Phone Website (Facebook, Linkedin) and more... The avatar will reply with the answer. Double tap the chat bubble or chat icon to expand or shrink the bubbles. When the avatar is speaking, you can tap the stop icon to stop. You can tap the cancel icon if you want to cancel the voice recoginition. History and Favourites \u00b6 Tap the favourite icon to favourite a user or card In the scanning or AR page, tap the list icon (bottom left) to open history list You will see a history of scanned card You can swipe to switch between history, favourite page and back. You can long press the list item to unfavourite or remove from history. You can search in the list by tapping the search icon. You can tap the list item to see detail of the user In the detail page, you can quickly contact the card owner. Update or Create Your Own Card Profile \u00b6 In the scanning or AR page, tap the user icon (bottom right) to open your profile Here, You can edit your personal information, view your own avatar, download your QR code, or logout. You can upload a new profile picture and crop it by clicking your profile photo. You must tap save to save any changes. You can change your 3D avatars here. You can download your QR code by clicking the view QR button, you can share it with friends, or print it on your business card, to let others view and interact with your AR business card. You can preview your profile or avatar by tapping the \"My profile\" and \"My avatar\" button. You can logout of all devices (all other web or app) by tapping \"logout all\".","title":"Flutter User Manual"},{"location":"Flutter-Manual/#flutter-user-manual","text":"","title":"Flutter User Manual"},{"location":"Flutter-Manual/#business-card-and-image-target-demo","text":"To demostrate the use of AR and QR code scanning, you can download the following image target. You could print them out as business cards, or display them on another device (such as iPad or another phone). Download the demo for printing (pdf)","title":"Business Card and Image target Demo"},{"location":"Flutter-Manual/#download-or-view-the-application","text":"Flutter Mobile App - Download for Android (*.apk) - More Releases - Alternative onedrive link","title":"Download or View the Application"},{"location":"Flutter-Manual/#register-and-login","text":"You can view and interact with AR avatars even without login. However, to have the best user experiences, you should register or login before use. If you are not logged in, in the main page, tap either list or profile button will redirect you to the login page. You can now create your account or loggin to existing account. You can use the demo accounts listed below (use email and password to login): Username Email Password jonmcnamara john@ucl.ac.uk password amy-pajak amy@ucl.ac.uk password ben-jones ben@ucl.ac.uk password When you register, you will be automatically logged in.","title":"Register and Login"},{"location":"Flutter-Manual/#first-launch","text":"Install the APK file on your Android device. Tap the icon to launch the app. You should see three popup asking for camera, microphone and storage permissions. You should agree with all of them, otherwise the app might not run correctly. Info In unlikely event, you might need to relaunch your app after granting part of the permissions.","title":"First Launch"},{"location":"Flutter-Manual/#view-avatar","text":"In the QR code scanning page, scan the QR code on your business card. Or tap \"demo\" to view the demo card. Info If you do not own an AR business card, you can download it in the Files section of this documentation. You should now enter the AR page. Follow the instruction and scan the back of the business card, you should now see an AR avatar on top of the physical card. If you don't have a phsycial business card for AR tracking, click here to download You can switch between the AR scene and the 3D non-AR scene by toggling the AR button. You can see the user profile page by tapping the profile picture. You can go back by tapping the exit button.","title":"View Avatar"},{"location":"Flutter-Manual/#chat","text":"Tap the mic icon to speak, You can also for: General Description Work Experience Education Email Phone Website (Facebook, Linkedin) and more... The avatar will reply with the answer. Double tap the chat bubble or chat icon to expand or shrink the bubbles. When the avatar is speaking, you can tap the stop icon to stop. You can tap the cancel icon if you want to cancel the voice recoginition.","title":"Chat"},{"location":"Flutter-Manual/#history-and-favourites","text":"Tap the favourite icon to favourite a user or card In the scanning or AR page, tap the list icon (bottom left) to open history list You will see a history of scanned card You can swipe to switch between history, favourite page and back. You can long press the list item to unfavourite or remove from history. You can search in the list by tapping the search icon. You can tap the list item to see detail of the user In the detail page, you can quickly contact the card owner.","title":"History and Favourites"},{"location":"Flutter-Manual/#update-or-create-your-own-card-profile","text":"In the scanning or AR page, tap the user icon (bottom right) to open your profile Here, You can edit your personal information, view your own avatar, download your QR code, or logout. You can upload a new profile picture and crop it by clicking your profile photo. You must tap save to save any changes. You can change your 3D avatars here. You can download your QR code by clicking the view QR button, you can share it with friends, or print it on your business card, to let others view and interact with your AR business card. You can preview your profile or avatar by tapping the \"My profile\" and \"My avatar\" button. You can logout of all devices (all other web or app) by tapping \"logout all\".","title":"Update or Create Your Own Card Profile"},{"location":"History-API/","text":"History Cards API \u00b6 Get history \u00b6 GET - /history/get \u00b6 Use this request to return a history list of cards the user have scanned. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Query Parameter(s) : none Request Body : none Success The history can be returned. Status Code : 200 OK Response Body : { \"_id\" : \"<History Storage ID, not usable>\" , \"userid\" : \"<User ID of the history owner>\" , \"list\" : [ { \"_id\" : \"<History item id, with time info>\" , \"name\" : \"<History user name>\" , \"userid\" : \"<Current item user id>\" , \"profile\" : \"<Profile avatar url>\" , \"username\" : \"<Current item user name>\" , \"isFav\" : \"<Is this user in the favourites of the request user>\" , }, ... ] } Key Type Description userid string User ID list List List of history items Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" } Add to history \u00b6 POST - /history/add \u00b6 Use this request to add a single item into the user's history list. Any existing history of this particular id will be overwritten (i.e. only one history entry per each user, only newest entry is kept). Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Query Parameter(s) : none Request Body : { userid : string } Key Type Description Constraints Default Required userid string MongoDb ObjectID of the history item (an viewed user) to add MongoDb ObjectID Type N/A Yes Success The history can be added. Status Code : 200 OK Response Body : { \"success\" : \"history updated\" } Key Type Description success string success message Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" } Remove from history \u00b6 POST - /history/remove \u00b6 Use this request to remove a single entry from the history. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Query Parameter(s) : none Request Body : { userid : string } Key Type Description Constraints Default Required userid string MongoDb ObjectID of the history item (an viewed user) to remove MongoDb ObjectID Type N/A Yes Success The history is removed if the userid provided is correct. Status Code : 200 OK Response Body : { \"success\" : \"history might be removed\" } Key Type Description success string success message Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" } POST - /history/remove-all \u00b6 Use this request to remove all entries from the history list. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Query Parameter(s) : none Request Body : none Success The history is cleared. Status Code : 200 OK Response Body : { \"success\" : \"history is cleared\" } Key Type Description success string success message Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" }","title":"User History Cards"},{"location":"History-API/#history-cards-api","text":"","title":"History Cards API"},{"location":"History-API/#get-history","text":"","title":"Get history"},{"location":"History-API/#get-historyget","text":"Use this request to return a history list of cards the user have scanned. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Query Parameter(s) : none Request Body : none Success The history can be returned. Status Code : 200 OK Response Body : { \"_id\" : \"<History Storage ID, not usable>\" , \"userid\" : \"<User ID of the history owner>\" , \"list\" : [ { \"_id\" : \"<History item id, with time info>\" , \"name\" : \"<History user name>\" , \"userid\" : \"<Current item user id>\" , \"profile\" : \"<Profile avatar url>\" , \"username\" : \"<Current item user name>\" , \"isFav\" : \"<Is this user in the favourites of the request user>\" , }, ... ] } Key Type Description userid string User ID list List List of history items Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" }","title":"GET - /history/get"},{"location":"History-API/#add-to-history","text":"","title":"Add to history"},{"location":"History-API/#post-historyadd","text":"Use this request to add a single item into the user's history list. Any existing history of this particular id will be overwritten (i.e. only one history entry per each user, only newest entry is kept). Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Query Parameter(s) : none Request Body : { userid : string } Key Type Description Constraints Default Required userid string MongoDb ObjectID of the history item (an viewed user) to add MongoDb ObjectID Type N/A Yes Success The history can be added. Status Code : 200 OK Response Body : { \"success\" : \"history updated\" } Key Type Description success string success message Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" }","title":"POST - /history/add"},{"location":"History-API/#remove-from-history","text":"","title":"Remove from history"},{"location":"History-API/#post-historyremove","text":"Use this request to remove a single entry from the history. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Query Parameter(s) : none Request Body : { userid : string } Key Type Description Constraints Default Required userid string MongoDb ObjectID of the history item (an viewed user) to remove MongoDb ObjectID Type N/A Yes Success The history is removed if the userid provided is correct. Status Code : 200 OK Response Body : { \"success\" : \"history might be removed\" } Key Type Description success string success message Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" }","title":"POST - /history/remove"},{"location":"History-API/#post-historyremove-all","text":"Use this request to remove all entries from the history list. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Query Parameter(s) : none Request Body : none Success The history is cleared. Status Code : 200 OK Response Body : { \"success\" : \"history is cleared\" } Key Type Description success string success message Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" }","title":"POST - /history/remove-all"},{"location":"Profile-API/","text":"User Profile API \u00b6 Get User Profile \u00b6 POST - /profile/get \u00b6 Use this request to return of the user's full profile in JSON. The URL of this endpoint is embedded in the QR code on the business card. Query Parameter(s) : Parameter Type Description Constraints Default Required username string Username of the profile being reuqested N/A N/A One of two is required _id string User's MongoDb id MongoDb ObjectID Type N/A One of two is required Example /profile/get?username=jonmcnamara Request Body : { _id : string } Key Type Description Constraints Default Required _id string MongoDb ObjectID of the request sender. Sent from the client. N/A N/A No Success The user can be found using the query and have a full profile. Status Code : 200 OK Response Body : { _id: \"xxxxxxxxxx\" , dummyid: \"dummy1\" , username: \"jonmcnamara\" , profile: \"https://media-exp2.licdn.com/dms/image/C5603AQFA_oQhi6-2Cg/profile-displayphoto-shrink_800_800/0?e=1584576000&v=beta&t=QfVEJg5DU7IHXBiUlaZ2nRjI5gHTqok20eL17iHHa8Y\" , email: \"john@ucl.ac.uk\" , phone: \"12345678901\" , website: \"ar-card.henryz.cc\" , firstname: \"John\" , lastname: \"McNamara\" , description: \"John is a Senior Inventor, Research Fellow, Impact Fellow and currently provides technical leadership for the IBM Hursley Innovation Centre. John has a diverse background that includes consultancy, performance, service & product delivery, all underpinned by a passion for innovation. Most recently his work leading the Innovation Centre technologist team has allowed him to combine these interests in order to maximise the potential of new technology while solving real problems. John has overseen the delivery of many cognitive cloud-based solutions and understands how to combine technologies to quickly provide value for customers. John is an active inventor with an invention portfolio spanning mobile, A.I, messaging, integration and predictive analytics.\" , experience: \"Senior Inventor at IBM and Hursley Innovation Labs Technologist Lead\" , education: \"I have studied at University of Humberside, on Field Of StudyInformation Systems. And received a 2:1 Grade\" , gender: 2, isFav: true } Key Type Description _id string MongoDB ObjectID dummyid string Exists if the user is dummy data. username string Unique identifier profile string Profile picture image Url gender integer 0 - Unset, 1 - Female, 2 - Male isFav boolean Whether the profile is in current user's favourite list User not found Status Code : 400 Bad Request Response Body : { \"error\" : \"not-found\" } GET - /profile/get \u00b6 This request should not be used by the client, as the endpoint is prepared when the user scans the QR code using other app such as the camera app. In such case the URL would be opend in a browser. A html page which invites the user to download our app would be returned. Query Parameter(s) : Same as the POST request above. Success HTML page which invites the user to download the app. Update User Profile \u00b6 POST - /profile/update \u00b6 Request Body : { _id : \"xxxxxxxxxx\" , dummyid : \"dummy1\" , username : \"jonmcnamara\" , profile : \"https://media-exp2.licdn.com/dms/image/C5603AQFA_oQhi6-2Cg/profile-displayphoto-shrink_800_800/0?e=1584576000&v=beta&t=QfVEJg5DU7IHXBiUlaZ2nRjI5gHTqok20eL17iHHa8Y\" , firstname : \"John\" , lastname : \"McNamara\" , description : \"John is a Senior Inventor, Research Fellow, Impact Fellow and currently provides technical leadership for the IBM Hursley Innovation Centre. John has a diverse background that includes consultancy, performance, service & product delivery, all underpinned by a passion for innovation. Most recently his work leading the Innovation Centre technologist team has allowed him to combine these interests in order to maximise the potential of new technology while solving real problems. John has overseen the delivery of many cognitive cloud-based solutions and understands how to combine technologies to quickly provide value for customers. John is an active inventor with an invention portfolio spanning mobile, A.I, messaging, integration and predictive analytics.\" , experience : \"Senior Inventor at IBM and Hursley Innovation Labs Technologist Lead\" , education : \"I have studied at University of Humberside, on Field Of StudyInformation Systems. And received a 2:1 Grade\" , gender : 2 } Key Type Description Constraints Default Required _id string User's MongoDb id MongoDb ObjectID Type N/A Yes Other fields N/A Any other changed fields, or full profile N/A N/A No Success The user can be found using the query and can be updated. Status Code : 200 OK Response Body : { \"status\" : \"success\" } User not found or cannot be updated Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error Message>\" } Create dummy profile data \u00b6 GET - generate/profile \u00b6 Use this request to generate 3 predefined user profiles (with username : jonmcnamara , amy-pajak , ben-jones respectively). Note To use the dummy profile queried by the usernames above, you must generate it using this request first Query Parameter(s) : None Success Profile generated. Status Code : 200 OK Response Body : { \"status\" : \"success\" }","title":"User Profile"},{"location":"Profile-API/#user-profile-api","text":"","title":"User Profile API"},{"location":"Profile-API/#get-user-profile","text":"","title":"Get User Profile"},{"location":"Profile-API/#post-profileget","text":"Use this request to return of the user's full profile in JSON. The URL of this endpoint is embedded in the QR code on the business card. Query Parameter(s) : Parameter Type Description Constraints Default Required username string Username of the profile being reuqested N/A N/A One of two is required _id string User's MongoDb id MongoDb ObjectID Type N/A One of two is required Example /profile/get?username=jonmcnamara Request Body : { _id : string } Key Type Description Constraints Default Required _id string MongoDb ObjectID of the request sender. Sent from the client. N/A N/A No Success The user can be found using the query and have a full profile. Status Code : 200 OK Response Body : { _id: \"xxxxxxxxxx\" , dummyid: \"dummy1\" , username: \"jonmcnamara\" , profile: \"https://media-exp2.licdn.com/dms/image/C5603AQFA_oQhi6-2Cg/profile-displayphoto-shrink_800_800/0?e=1584576000&v=beta&t=QfVEJg5DU7IHXBiUlaZ2nRjI5gHTqok20eL17iHHa8Y\" , email: \"john@ucl.ac.uk\" , phone: \"12345678901\" , website: \"ar-card.henryz.cc\" , firstname: \"John\" , lastname: \"McNamara\" , description: \"John is a Senior Inventor, Research Fellow, Impact Fellow and currently provides technical leadership for the IBM Hursley Innovation Centre. John has a diverse background that includes consultancy, performance, service & product delivery, all underpinned by a passion for innovation. Most recently his work leading the Innovation Centre technologist team has allowed him to combine these interests in order to maximise the potential of new technology while solving real problems. John has overseen the delivery of many cognitive cloud-based solutions and understands how to combine technologies to quickly provide value for customers. John is an active inventor with an invention portfolio spanning mobile, A.I, messaging, integration and predictive analytics.\" , experience: \"Senior Inventor at IBM and Hursley Innovation Labs Technologist Lead\" , education: \"I have studied at University of Humberside, on Field Of StudyInformation Systems. And received a 2:1 Grade\" , gender: 2, isFav: true } Key Type Description _id string MongoDB ObjectID dummyid string Exists if the user is dummy data. username string Unique identifier profile string Profile picture image Url gender integer 0 - Unset, 1 - Female, 2 - Male isFav boolean Whether the profile is in current user's favourite list User not found Status Code : 400 Bad Request Response Body : { \"error\" : \"not-found\" }","title":"POST - /profile/get"},{"location":"Profile-API/#get-profileget","text":"This request should not be used by the client, as the endpoint is prepared when the user scans the QR code using other app such as the camera app. In such case the URL would be opend in a browser. A html page which invites the user to download our app would be returned. Query Parameter(s) : Same as the POST request above. Success HTML page which invites the user to download the app.","title":"GET - /profile/get"},{"location":"Profile-API/#update-user-profile","text":"","title":"Update User Profile"},{"location":"Profile-API/#post-profileupdate","text":"Request Body : { _id : \"xxxxxxxxxx\" , dummyid : \"dummy1\" , username : \"jonmcnamara\" , profile : \"https://media-exp2.licdn.com/dms/image/C5603AQFA_oQhi6-2Cg/profile-displayphoto-shrink_800_800/0?e=1584576000&v=beta&t=QfVEJg5DU7IHXBiUlaZ2nRjI5gHTqok20eL17iHHa8Y\" , firstname : \"John\" , lastname : \"McNamara\" , description : \"John is a Senior Inventor, Research Fellow, Impact Fellow and currently provides technical leadership for the IBM Hursley Innovation Centre. John has a diverse background that includes consultancy, performance, service & product delivery, all underpinned by a passion for innovation. Most recently his work leading the Innovation Centre technologist team has allowed him to combine these interests in order to maximise the potential of new technology while solving real problems. John has overseen the delivery of many cognitive cloud-based solutions and understands how to combine technologies to quickly provide value for customers. John is an active inventor with an invention portfolio spanning mobile, A.I, messaging, integration and predictive analytics.\" , experience : \"Senior Inventor at IBM and Hursley Innovation Labs Technologist Lead\" , education : \"I have studied at University of Humberside, on Field Of StudyInformation Systems. And received a 2:1 Grade\" , gender : 2 } Key Type Description Constraints Default Required _id string User's MongoDb id MongoDb ObjectID Type N/A Yes Other fields N/A Any other changed fields, or full profile N/A N/A No Success The user can be found using the query and can be updated. Status Code : 200 OK Response Body : { \"status\" : \"success\" } User not found or cannot be updated Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error Message>\" }","title":"POST - /profile/update"},{"location":"Profile-API/#create-dummy-profile-data","text":"","title":"Create dummy profile data"},{"location":"Profile-API/#get-generateprofile","text":"Use this request to generate 3 predefined user profiles (with username : jonmcnamara , amy-pajak , ben-jones respectively). Note To use the dummy profile queried by the usernames above, you must generate it using this request first Query Parameter(s) : None Success Profile generated. Status Code : 200 OK Response Body : { \"status\" : \"success\" }","title":"GET - generate/profile"},{"location":"Reports-And-Downloads/","text":"Bi-Weekly Reports \u00b6 To report and mark our progress, and plan our prorities, we have been documenting our progress every two week at the following dates: Term 1 (2019): Nov 22, Dec 6 Term 2 (2020): Jan 24, Feb 7, Feb 28, Mar 13, Mar 27 Links to the reports respectively: Bi-Weekly Report 1 Bi-Weekly Report 2 Bi-Weekly Report 3 Bi-Weekly Report 4 Bi-Weekly Report 5 Bi-Weekly Report 6 Bi-Weekly Report 7 Business Card and Image target Demo \u00b6 To demonstrate the use of AR and QR code scanning, you can download the following image target. You could print them out as business cards, or display them on another device (such as iPad or another phone). The file contain the QR code and business card dummy for the 3 demo users. Download the demo for printing (pdf) Download or View the Application \u00b6 Flutter Mobile App - Download for Android (*.apk) - More Releases - Alternative onedrive link Vue Web Dashboard - http://ar-card.henryz.cc/app","title":"Reports and Downloads"},{"location":"Reports-And-Downloads/#bi-weekly-reports","text":"To report and mark our progress, and plan our prorities, we have been documenting our progress every two week at the following dates: Term 1 (2019): Nov 22, Dec 6 Term 2 (2020): Jan 24, Feb 7, Feb 28, Mar 13, Mar 27 Links to the reports respectively: Bi-Weekly Report 1 Bi-Weekly Report 2 Bi-Weekly Report 3 Bi-Weekly Report 4 Bi-Weekly Report 5 Bi-Weekly Report 6 Bi-Weekly Report 7","title":"Bi-Weekly Reports"},{"location":"Reports-And-Downloads/#business-card-and-image-target-demo","text":"To demonstrate the use of AR and QR code scanning, you can download the following image target. You could print them out as business cards, or display them on another device (such as iPad or another phone). The file contain the QR code and business card dummy for the 3 demo users. Download the demo for printing (pdf)","title":"Business Card and Image target Demo"},{"location":"Reports-And-Downloads/#download-or-view-the-application","text":"Flutter Mobile App - Download for Android (*.apk) - More Releases - Alternative onedrive link Vue Web Dashboard - http://ar-card.henryz.cc/app","title":"Download or View the Application"},{"location":"Vue-Manual/","text":"Vue User Manual \u00b6 Application Live at - http://ar-card.henryz.cc/app Register and Login \u00b6 You can edit your personal detail and view the history and favorites after login. If you haven't get account yet, in the login page, click the register button will redirect you to the register section. You can now create your account or using demo account. You can use the demo accounts listed below (use email and password to login): Username Email Password jonmcnamara john@ucl.ac.uk password amy-pajak amy@ucl.ac.uk password ben-jones ben@ucl.ac.uk password When you register, you will be automatically logged in. History and Favourites \u00b6 Tap the favourite or history tab to navigate to the cards page. You can search in the list using the search field. You can tap the list item to see detail of the user In the detail page, you can quickly remove or favourite/unfavourite the card owner. under the cards, you can click the navigation to switch pages. Update or Create Your Own Card Profile \u00b6 Tap the profile tab to navigate to the profile page. Here, You can edit your personal information, view and upload your profile image. Once you finished your profile click save button to save your changes or discard button to restore. You can upload a new profile picture by clicking your profile photo. You must tap save to save any changes. You can change your AR avatars here. You can logout of current account by clicking \"log out\".","title":"Vue User Manual"},{"location":"Vue-Manual/#vue-user-manual","text":"Application Live at - http://ar-card.henryz.cc/app","title":"Vue User Manual"},{"location":"Vue-Manual/#register-and-login","text":"You can edit your personal detail and view the history and favorites after login. If you haven't get account yet, in the login page, click the register button will redirect you to the register section. You can now create your account or using demo account. You can use the demo accounts listed below (use email and password to login): Username Email Password jonmcnamara john@ucl.ac.uk password amy-pajak amy@ucl.ac.uk password ben-jones ben@ucl.ac.uk password When you register, you will be automatically logged in.","title":"Register and Login"},{"location":"Vue-Manual/#history-and-favourites","text":"Tap the favourite or history tab to navigate to the cards page. You can search in the list using the search field. You can tap the list item to see detail of the user In the detail page, you can quickly remove or favourite/unfavourite the card owner. under the cards, you can click the navigation to switch pages.","title":"History and Favourites"},{"location":"Vue-Manual/#update-or-create-your-own-card-profile","text":"Tap the profile tab to navigate to the profile page. Here, You can edit your personal information, view and upload your profile image. Once you finished your profile click save button to save your changes or discard button to restore. You can upload a new profile picture by clicking your profile photo. You must tap save to save any changes. You can change your AR avatars here. You can logout of current account by clicking \"log out\".","title":"Update or Create Your Own Card Profile"},{"location":"Welcome-API/","text":"Welcome to IBM AR Card \u00b6 Welcome to IBM AR Business Card's backend documentation. The backend app is built using: Node.js + Express.js MongoDB We are using cloud services include: IBM Cloud provided by our client Watson Assistant Azure provided by UCL Source Code Source code for IBM AR Card API available at IBM-AR-CARD/Backend-API .","title":"Overview"},{"location":"Welcome-API/#welcome-to-ibm-ar-card","text":"Welcome to IBM AR Business Card's backend documentation. The backend app is built using: Node.js + Express.js MongoDB We are using cloud services include: IBM Cloud provided by our client Watson Assistant Azure provided by UCL Source Code Source code for IBM AR Card API available at IBM-AR-CARD/Backend-API .","title":"Welcome to IBM AR Card"}]}