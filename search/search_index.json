{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to IBM AR Card \u00b6 Welcome to IBM AR Business Card's backend documentation. The backend app is built using: Node.js + Express.js MongoDB We are using cloud services include: IBM Cloud provided by our client Watson Assistant Azure provided by UCL Source Code Source code for IBM AR Card API available at IBM-AR-CARD/Backend-API .","title":"Welcome"},{"location":"#welcome-to-ibm-ar-card","text":"Welcome to IBM AR Business Card's backend documentation. The backend app is built using: Node.js + Express.js MongoDB We are using cloud services include: IBM Cloud provided by our client Watson Assistant Azure provided by UCL Source Code Source code for IBM AR Card API available at IBM-AR-CARD/Backend-API .","title":"Welcome to IBM AR Card"},{"location":"Authentication/","text":"User Authentication \u00b6 Overview \u00b6 We uses JWT (Json Web Token) for user login and authentications. A JWT token will be assigned to the client after the login request, the token is persistent unless the user log out manually. The token will be stored in the database, up to 2 tokens can be generated, thus it means the user can sign in to 2 different devices (e.g. web and mobile) at the same time. If additional device is logged in, the oldest token will be automatically invalidated, thus the first device would be automatically logged out. The user can access logout-all endpoint to invalidate all tokens at once, achieving logging out of all devices. The client application should be able to handle the invalid token. That's to say, when any request that requires authorization returned 401 Unauthorized , the app should immediately abandon any further request and perform logout on the device, then prompt the user to log in again. Authorization Header Every user specific requests (e.g. logout, update profile, access favourites) would requrie the JWT Token be passed as authorization in the request header. With key - Authorization and value - Bearer <JWT-Token> , example below. Key Value Authorization Bearer <JWT-Token> JWT-Token should look like (with Bearer ): Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1ZTM0ODQ2YzllMjcxNTEwMmQyNDZiOWMiLCJpYXQiOjE1ODA1MjIzMzR9.2kafsTdABIemwiQN-sDfmHbdkOmPkz8fj_n_qGpxYKg User Registration \u00b6 POST - /user/register \u00b6 Use this request to register a new user. Request Body : { \"username\" : String , // min length 3, max length 25 \"email\" : String , \"password\" : String // min length 5, max length 25 } Key Type Description Constraints Default Required username string Unique username. min length 3, max length 25 N/A Yes email string Unique E-mail. Different from contact e-mail Email format N/A Yes password string Plain text password min length 5, max length 25 N/A Yes Success The user can be registered. Status Code : 200 OK Response Body : { \"success\" : \"Successfully regisered, you can now log in.\" } Key Type Description success string Success message Invalid credentials Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } User Login \u00b6 POST - /user/login \u00b6 Use this request to login an existing user. Request Body : { \"email\" : String , \"password\" : String } Key Type Description Constraints Default Required email string Unique E-mail. Different from contact e-mail Email format N/A Yes password string Plain text password min length 5, max length 25 N/A Yes Success The user can be logged in. Status Code : 200 OK Response Body : { \"success\" : \"Successfully logged in.\" , \"token\" : \"<JWT Token>\" } Key Type Description success string Success message token string JWT Token of the user, this token is persistent Invalid credentials Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } User Logout \u00b6 POST - /user/logout \u00b6 Use this request to logout an existing user. This will invalidate the JWT token passed. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Request Body : None Success The user can be logged out. Status Code : 200 OK Response Body : { \"success\" : \"You are logged out\" } Key Type Description success string Success message Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" } POST - /user/logout-all \u00b6 Use this request to logout all devices of an existing user. This will invalidate ALL JWT tokens stored in the server. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Request Body : None Success The user can be logged out. Status Code : 200 OK Response Body : { \"success\" : \"You are logged out of all devices\" } Key Type Description success string Success message Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" } JWT Test \u00b6 POST - /user/test-token \u00b6 Test if a token is valid. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Request Body : None Success The token is valid. Status Code : 200 OK Response Body : { \"success\" : \"token valid\" } Key Type Description success string Success message Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" }","title":"User Authentication"},{"location":"Authentication/#user-authentication","text":"","title":"User Authentication"},{"location":"Authentication/#overview","text":"We uses JWT (Json Web Token) for user login and authentications. A JWT token will be assigned to the client after the login request, the token is persistent unless the user log out manually. The token will be stored in the database, up to 2 tokens can be generated, thus it means the user can sign in to 2 different devices (e.g. web and mobile) at the same time. If additional device is logged in, the oldest token will be automatically invalidated, thus the first device would be automatically logged out. The user can access logout-all endpoint to invalidate all tokens at once, achieving logging out of all devices. The client application should be able to handle the invalid token. That's to say, when any request that requires authorization returned 401 Unauthorized , the app should immediately abandon any further request and perform logout on the device, then prompt the user to log in again. Authorization Header Every user specific requests (e.g. logout, update profile, access favourites) would requrie the JWT Token be passed as authorization in the request header. With key - Authorization and value - Bearer <JWT-Token> , example below. Key Value Authorization Bearer <JWT-Token> JWT-Token should look like (with Bearer ): Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1ZTM0ODQ2YzllMjcxNTEwMmQyNDZiOWMiLCJpYXQiOjE1ODA1MjIzMzR9.2kafsTdABIemwiQN-sDfmHbdkOmPkz8fj_n_qGpxYKg","title":"Overview"},{"location":"Authentication/#user-registration","text":"","title":"User Registration"},{"location":"Authentication/#post-userregister","text":"Use this request to register a new user. Request Body : { \"username\" : String , // min length 3, max length 25 \"email\" : String , \"password\" : String // min length 5, max length 25 } Key Type Description Constraints Default Required username string Unique username. min length 3, max length 25 N/A Yes email string Unique E-mail. Different from contact e-mail Email format N/A Yes password string Plain text password min length 5, max length 25 N/A Yes Success The user can be registered. Status Code : 200 OK Response Body : { \"success\" : \"Successfully regisered, you can now log in.\" } Key Type Description success string Success message Invalid credentials Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" }","title":"POST - /user/register"},{"location":"Authentication/#user-login","text":"","title":"User Login"},{"location":"Authentication/#post-userlogin","text":"Use this request to login an existing user. Request Body : { \"email\" : String , \"password\" : String } Key Type Description Constraints Default Required email string Unique E-mail. Different from contact e-mail Email format N/A Yes password string Plain text password min length 5, max length 25 N/A Yes Success The user can be logged in. Status Code : 200 OK Response Body : { \"success\" : \"Successfully logged in.\" , \"token\" : \"<JWT Token>\" } Key Type Description success string Success message token string JWT Token of the user, this token is persistent Invalid credentials Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" }","title":"POST - /user/login"},{"location":"Authentication/#user-logout","text":"","title":"User Logout"},{"location":"Authentication/#post-userlogout","text":"Use this request to logout an existing user. This will invalidate the JWT token passed. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Request Body : None Success The user can be logged out. Status Code : 200 OK Response Body : { \"success\" : \"You are logged out\" } Key Type Description success string Success message Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" }","title":"POST - /user/logout"},{"location":"Authentication/#post-userlogout-all","text":"Use this request to logout all devices of an existing user. This will invalidate ALL JWT tokens stored in the server. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Request Body : None Success The user can be logged out. Status Code : 200 OK Response Body : { \"success\" : \"You are logged out of all devices\" } Key Type Description success string Success message Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" }","title":"POST - /user/logout-all"},{"location":"Authentication/#jwt-test","text":"","title":"JWT Test"},{"location":"Authentication/#post-usertest-token","text":"Test if a token is valid. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Request Body : None Success The token is valid. Status Code : 200 OK Response Body : { \"success\" : \"token valid\" } Key Type Description success string Success message Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" }","title":"POST - /user/test-token"},{"location":"Favorite-API/","text":"User Favourite Cards API \u00b6 Get favorite \u00b6 GET - /favorite/get \u00b6 Use this request to return a favorite list of cards the user have scanned. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Query Parameter(s) : none Request Body : none Success The favorite can be returned. Status Code : 200 OK Response Body : { \"_id\" : \"<Favorite Storage ID, not usable>\" , \"userid\" : \"<User ID of the favorite owner>\" , \"favorite\" : [ { \"_id\" : \"<Favorite item id, with time info>\" , \"name\" : \"<Favorite user name>\" , \"userid\" : \"<Current item user id>\" , \"profile\" : \"<Profile avatar url>\" , \"username\" : \"<Current item user name>\" , }, ... ] } Key Type Description userid string User ID favorite List List of favorite items Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" } Add to favorite \u00b6 POST - /favorite/add \u00b6 Use this request to add a single item into the user's favorite list. Any existing favorite of this particular id will be overwritten (i.e. only one favorite entry per each user, only newest entry is kept). Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Query Parameter(s) : none Request Body : { userid : string } Key Type Description Constraints Default Required userid string MongoDb ObjectID of the favorite item (an viewed user) to add MongoDb ObjectID Type N/A Yes Success The favorite can be added. Status Code : 200 OK Response Body : { \"success\" : \"favorite updated\" } Key Type Description success string success message Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" } Remove from favorite \u00b6 POST - /favorite/remove \u00b6 Use this request to remove a single entry from the favorite. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Query Parameter(s) : none Request Body : { userid : string } Key Type Description Constraints Default Required userid string MongoDb ObjectID of the favorite item (an viewed user) to remove MongoDb ObjectID Type N/A Yes Success The favorite is removed if the userid provided is correct. Status Code : 200 OK Response Body : { \"success\" : \"favorite might be removed\" } Key Type Description success string success message Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" } POST - /favorite/remove-all \u00b6 Use this request to remove all entries from the favorite list. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Query Parameter(s) : none Request Body : none Success The favorite is cleared. Status Code : 200 OK Response Body : { \"success\" : \"favorite is cleared\" } Key Type Description success string success message Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" }","title":"User Favourite Cards"},{"location":"Favorite-API/#user-favourite-cards-api","text":"","title":"User Favourite Cards API"},{"location":"Favorite-API/#get-favorite","text":"","title":"Get favorite"},{"location":"Favorite-API/#get-favoriteget","text":"Use this request to return a favorite list of cards the user have scanned. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Query Parameter(s) : none Request Body : none Success The favorite can be returned. Status Code : 200 OK Response Body : { \"_id\" : \"<Favorite Storage ID, not usable>\" , \"userid\" : \"<User ID of the favorite owner>\" , \"favorite\" : [ { \"_id\" : \"<Favorite item id, with time info>\" , \"name\" : \"<Favorite user name>\" , \"userid\" : \"<Current item user id>\" , \"profile\" : \"<Profile avatar url>\" , \"username\" : \"<Current item user name>\" , }, ... ] } Key Type Description userid string User ID favorite List List of favorite items Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" }","title":"GET - /favorite/get"},{"location":"Favorite-API/#add-to-favorite","text":"","title":"Add to favorite"},{"location":"Favorite-API/#post-favoriteadd","text":"Use this request to add a single item into the user's favorite list. Any existing favorite of this particular id will be overwritten (i.e. only one favorite entry per each user, only newest entry is kept). Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Query Parameter(s) : none Request Body : { userid : string } Key Type Description Constraints Default Required userid string MongoDb ObjectID of the favorite item (an viewed user) to add MongoDb ObjectID Type N/A Yes Success The favorite can be added. Status Code : 200 OK Response Body : { \"success\" : \"favorite updated\" } Key Type Description success string success message Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" }","title":"POST - /favorite/add"},{"location":"Favorite-API/#remove-from-favorite","text":"","title":"Remove from favorite"},{"location":"Favorite-API/#post-favoriteremove","text":"Use this request to remove a single entry from the favorite. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Query Parameter(s) : none Request Body : { userid : string } Key Type Description Constraints Default Required userid string MongoDb ObjectID of the favorite item (an viewed user) to remove MongoDb ObjectID Type N/A Yes Success The favorite is removed if the userid provided is correct. Status Code : 200 OK Response Body : { \"success\" : \"favorite might be removed\" } Key Type Description success string success message Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" }","title":"POST - /favorite/remove"},{"location":"Favorite-API/#post-favoriteremove-all","text":"Use this request to remove all entries from the favorite list. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Query Parameter(s) : none Request Body : none Success The favorite is cleared. Status Code : 200 OK Response Body : { \"success\" : \"favorite is cleared\" } Key Type Description success string success message Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" }","title":"POST - /favorite/remove-all"},{"location":"File-Upload/","text":"File Upload API \u00b6 File upload \u00b6 POST - /upload \u00b6 Upload image or audio file into the backend server. The file will be stored in the user's respective folder. Please name the filename carefully before upload, as this will be the file name stored on the server, file with the same name uploaded by the same user will be overwritten. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Request Body : Please put the raw file into the request body with key file . Key Type Description Constraints Default Required file File Raw File N/A N/A Yes Success The file can be upload. Status Code : 200 OK Response Body : { \"success\" : \"file uploaded\" , \"path\" : \"<Uploaded file URL>\" } Key Type Description success string Success message path string Uploaded file URL Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" } Standard file names \u00b6 The following are the example file names of common files shared between the client and the server. File name Description File type profile.png Image for user's profile picture png education.mp3 User's recording file for their education section mp3 description.mp3 User's recording file for their one sentence description section mp3 work-experience.mp3 User's recording file for their work experiences section mp3","title":"File Upload"},{"location":"File-Upload/#file-upload-api","text":"","title":"File Upload API"},{"location":"File-Upload/#file-upload","text":"","title":"File upload"},{"location":"File-Upload/#post-upload","text":"Upload image or audio file into the backend server. The file will be stored in the user's respective folder. Please name the filename carefully before upload, as this will be the file name stored on the server, file with the same name uploaded by the same user will be overwritten. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Request Body : Please put the raw file into the request body with key file . Key Type Description Constraints Default Required file File Raw File N/A N/A Yes Success The file can be upload. Status Code : 200 OK Response Body : { \"success\" : \"file uploaded\" , \"path\" : \"<Uploaded file URL>\" } Key Type Description success string Success message path string Uploaded file URL Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" }","title":"POST - /upload"},{"location":"File-Upload/#standard-file-names","text":"The following are the example file names of common files shared between the client and the server. File name Description File type profile.png Image for user's profile picture png education.mp3 User's recording file for their education section mp3 description.mp3 User's recording file for their one sentence description section mp3 work-experience.mp3 User's recording file for their work experiences section mp3","title":"Standard file names"},{"location":"History-API/","text":"History API \u00b6 Get history \u00b6 GET - /history/get \u00b6 Use this request to return a history list of cards the user have scanned. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Query Parameter(s) : none Request Body : none Success The history can be returned. Status Code : 200 OK Response Body : { \"_id\" : \"<History Storage ID, not usable>\" , \"userid\" : \"<User ID of the history owner>\" , \"history\" : [ { \"_id\" : \"<History item id, with time info>\" , \"name\" : \"<History user name>\" , \"userid\" : \"<Current item user id>\" , \"profile\" : \"<Profile avatar url>\" , \"username\" : \"<Current item user name>\" , }, ... ] } Key Type Description userid string User ID history List List of history items Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" } Add to history \u00b6 POST - /history/add \u00b6 Use this request to add a single item into the user's history list. Any existing history of this particular id will be overwritten (i.e. only one history entry per each user, only newest entry is kept). Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Query Parameter(s) : none Request Body : { userid : string } Key Type Description Constraints Default Required userid string MongoDb ObjectID of the history item (an viewed user) to add MongoDb ObjectID Type N/A Yes Success The history can be added. Status Code : 200 OK Response Body : { \"success\" : \"history updated\" } Key Type Description success string success message Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" } Remove from history \u00b6 POST - /history/remove \u00b6 Use this request to remove a single entry from the history. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Query Parameter(s) : none Request Body : { userid : string } Key Type Description Constraints Default Required userid string MongoDb ObjectID of the history item (an viewed user) to remove MongoDb ObjectID Type N/A Yes Success The history is removed if the userid provided is correct. Status Code : 200 OK Response Body : { \"success\" : \"history might be removed\" } Key Type Description success string success message Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" } POST - /history/remove-all \u00b6 Use this request to remove all entries from the history list. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Query Parameter(s) : none Request Body : none Success The history is cleared. Status Code : 200 OK Response Body : { \"success\" : \"history is cleared\" } Key Type Description success string success message Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" }","title":"User History Cards"},{"location":"History-API/#history-api","text":"","title":"History API"},{"location":"History-API/#get-history","text":"","title":"Get history"},{"location":"History-API/#get-historyget","text":"Use this request to return a history list of cards the user have scanned. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Query Parameter(s) : none Request Body : none Success The history can be returned. Status Code : 200 OK Response Body : { \"_id\" : \"<History Storage ID, not usable>\" , \"userid\" : \"<User ID of the history owner>\" , \"history\" : [ { \"_id\" : \"<History item id, with time info>\" , \"name\" : \"<History user name>\" , \"userid\" : \"<Current item user id>\" , \"profile\" : \"<Profile avatar url>\" , \"username\" : \"<Current item user name>\" , }, ... ] } Key Type Description userid string User ID history List List of history items Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" }","title":"GET - /history/get"},{"location":"History-API/#add-to-history","text":"","title":"Add to history"},{"location":"History-API/#post-historyadd","text":"Use this request to add a single item into the user's history list. Any existing history of this particular id will be overwritten (i.e. only one history entry per each user, only newest entry is kept). Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Query Parameter(s) : none Request Body : { userid : string } Key Type Description Constraints Default Required userid string MongoDb ObjectID of the history item (an viewed user) to add MongoDb ObjectID Type N/A Yes Success The history can be added. Status Code : 200 OK Response Body : { \"success\" : \"history updated\" } Key Type Description success string success message Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" }","title":"POST - /history/add"},{"location":"History-API/#remove-from-history","text":"","title":"Remove from history"},{"location":"History-API/#post-historyremove","text":"Use this request to remove a single entry from the history. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Query Parameter(s) : none Request Body : { userid : string } Key Type Description Constraints Default Required userid string MongoDb ObjectID of the history item (an viewed user) to remove MongoDb ObjectID Type N/A Yes Success The history is removed if the userid provided is correct. Status Code : 200 OK Response Body : { \"success\" : \"history might be removed\" } Key Type Description success string success message Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" }","title":"POST - /history/remove"},{"location":"History-API/#post-historyremove-all","text":"Use this request to remove all entries from the history list. Authorization JWT Token inside request header, with key Authorization and value Bearer <JWT-Token> Query Parameter(s) : none Request Body : none Success The history is cleared. Status Code : 200 OK Response Body : { \"success\" : \"history is cleared\" } Key Type Description success string success message Bad Request Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error message>\" } Unauthorized Status Code : 401 Unauthorized Response Body : { \"error\" : \"You are not authorized to access this resource\" }","title":"POST - /history/remove-all"},{"location":"Profile-API/","text":"User Profile API \u00b6 Get User Profile \u00b6 POST - /profile/get \u00b6 Use this request to return of the user's full profile in JSON. The URL of this endpoint is embedded in the QR code on the business card. Query Parameter(s) : Parameter Type Description Constraints Default Required username string Username of the profile being reuqested N/A N/A One of two is required _id string User's MongoDb id MongoDb ObjectID Type N/A One of two is required Example /profile/get?username=jonmcnamara Request Body : { _id : string } Key Type Description Constraints Default Required _id string MongoDb ObjectID of the request sender. Sent from the client. N/A N/A No Success The user can be found using the query and have a full profile. Status Code : 200 OK Response Body : { _id: \"xxxxxxxxxx\" , dummyid: \"dummy1\" , username: \"jonmcnamara\" , profile: \"https://media-exp2.licdn.com/dms/image/C5603AQFA_oQhi6-2Cg/profile-displayphoto-shrink_800_800/0?e=1584576000&v=beta&t=QfVEJg5DU7IHXBiUlaZ2nRjI5gHTqok20eL17iHHa8Y\" , firstname: \"John\" , lastname: \"McNamara\" , description: \"John is a Senior Inventor, Research Fellow, Impact Fellow and currently provides technical leadership for the IBM Hursley Innovation Centre. John has a diverse background that includes consultancy, performance, service & product delivery, all underpinned by a passion for innovation. Most recently his work leading the Innovation Centre technologist team has allowed him to combine these interests in order to maximise the potential of new technology while solving real problems. John has overseen the delivery of many cognitive cloud-based solutions and understands how to combine technologies to quickly provide value for customers. John is an active inventor with an invention portfolio spanning mobile, A.I, messaging, integration and predictive analytics.\" , experience: \"Senior Inventor at IBM and Hursley Innovation Labs Technologist Lead\" , education: \"I have studied at University of Humberside, on Field Of StudyInformation Systems. And received a 2:1 Grade\" , gender: 2 } Key Type Description _id string MongoDB ObjectID dummyid string Exists if the user is dummy data. username string Unique identifier profile string Profile picture image Url gender integer 0 - Unset, 1 - Female, 2 - Male User not found Status Code : 400 Bad Request Response Body : { \"error\" : \"not-found\" } GET - /profile/get \u00b6 This request should not be used by the client, as the endpoint is prepared when the user scans the QR code using other app such as the camera app. In such case the URL would be opend in a browser. A html page which invites the user to download our app would be returned. Query Parameter(s) : Same as the POST request above. Success HTML page which invites the user to download the app. Update User Profile \u00b6 POST - /profile/update \u00b6 Request Body : { _id : \"xxxxxxxxxx\" , dummyid : \"dummy1\" , username : \"jonmcnamara\" , profile : \"https://media-exp2.licdn.com/dms/image/C5603AQFA_oQhi6-2Cg/profile-displayphoto-shrink_800_800/0?e=1584576000&v=beta&t=QfVEJg5DU7IHXBiUlaZ2nRjI5gHTqok20eL17iHHa8Y\" , firstname : \"John\" , lastname : \"McNamara\" , description : \"John is a Senior Inventor, Research Fellow, Impact Fellow and currently provides technical leadership for the IBM Hursley Innovation Centre. John has a diverse background that includes consultancy, performance, service & product delivery, all underpinned by a passion for innovation. Most recently his work leading the Innovation Centre technologist team has allowed him to combine these interests in order to maximise the potential of new technology while solving real problems. John has overseen the delivery of many cognitive cloud-based solutions and understands how to combine technologies to quickly provide value for customers. John is an active inventor with an invention portfolio spanning mobile, A.I, messaging, integration and predictive analytics.\" , experience : \"Senior Inventor at IBM and Hursley Innovation Labs Technologist Lead\" , education : \"I have studied at University of Humberside, on Field Of StudyInformation Systems. And received a 2:1 Grade\" , gender : 2 } Key Type Description Constraints Default Required _id string User's MongoDb id MongoDb ObjectID Type N/A Yes Other fields N/A Any other changed fields, or full profile N/A N/A No Success The user can be found using the query and can be updated. Status Code : 200 OK Response Body : { \"status\" : \"success\" } User not found or cannot be updated Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error Message>\" } Create dummy profile data \u00b6 GET - /profile/generate \u00b6 Use this request to generate 3 predefined user profiles (with username : jonmcnamara , amy-pajak , ben-jones respectively). Note To use the dummy profile queried by the usernames above, you must generate it using this request first Query Parameter(s) : None Success Profile generated. Status Code : 200 OK Response Body : { \"status\" : \"success\" }","title":"User Profile"},{"location":"Profile-API/#user-profile-api","text":"","title":"User Profile API"},{"location":"Profile-API/#get-user-profile","text":"","title":"Get User Profile"},{"location":"Profile-API/#post-profileget","text":"Use this request to return of the user's full profile in JSON. The URL of this endpoint is embedded in the QR code on the business card. Query Parameter(s) : Parameter Type Description Constraints Default Required username string Username of the profile being reuqested N/A N/A One of two is required _id string User's MongoDb id MongoDb ObjectID Type N/A One of two is required Example /profile/get?username=jonmcnamara Request Body : { _id : string } Key Type Description Constraints Default Required _id string MongoDb ObjectID of the request sender. Sent from the client. N/A N/A No Success The user can be found using the query and have a full profile. Status Code : 200 OK Response Body : { _id: \"xxxxxxxxxx\" , dummyid: \"dummy1\" , username: \"jonmcnamara\" , profile: \"https://media-exp2.licdn.com/dms/image/C5603AQFA_oQhi6-2Cg/profile-displayphoto-shrink_800_800/0?e=1584576000&v=beta&t=QfVEJg5DU7IHXBiUlaZ2nRjI5gHTqok20eL17iHHa8Y\" , firstname: \"John\" , lastname: \"McNamara\" , description: \"John is a Senior Inventor, Research Fellow, Impact Fellow and currently provides technical leadership for the IBM Hursley Innovation Centre. John has a diverse background that includes consultancy, performance, service & product delivery, all underpinned by a passion for innovation. Most recently his work leading the Innovation Centre technologist team has allowed him to combine these interests in order to maximise the potential of new technology while solving real problems. John has overseen the delivery of many cognitive cloud-based solutions and understands how to combine technologies to quickly provide value for customers. John is an active inventor with an invention portfolio spanning mobile, A.I, messaging, integration and predictive analytics.\" , experience: \"Senior Inventor at IBM and Hursley Innovation Labs Technologist Lead\" , education: \"I have studied at University of Humberside, on Field Of StudyInformation Systems. And received a 2:1 Grade\" , gender: 2 } Key Type Description _id string MongoDB ObjectID dummyid string Exists if the user is dummy data. username string Unique identifier profile string Profile picture image Url gender integer 0 - Unset, 1 - Female, 2 - Male User not found Status Code : 400 Bad Request Response Body : { \"error\" : \"not-found\" }","title":"POST - /profile/get"},{"location":"Profile-API/#get-profileget","text":"This request should not be used by the client, as the endpoint is prepared when the user scans the QR code using other app such as the camera app. In such case the URL would be opend in a browser. A html page which invites the user to download our app would be returned. Query Parameter(s) : Same as the POST request above. Success HTML page which invites the user to download the app.","title":"GET - /profile/get"},{"location":"Profile-API/#update-user-profile","text":"","title":"Update User Profile"},{"location":"Profile-API/#post-profileupdate","text":"Request Body : { _id : \"xxxxxxxxxx\" , dummyid : \"dummy1\" , username : \"jonmcnamara\" , profile : \"https://media-exp2.licdn.com/dms/image/C5603AQFA_oQhi6-2Cg/profile-displayphoto-shrink_800_800/0?e=1584576000&v=beta&t=QfVEJg5DU7IHXBiUlaZ2nRjI5gHTqok20eL17iHHa8Y\" , firstname : \"John\" , lastname : \"McNamara\" , description : \"John is a Senior Inventor, Research Fellow, Impact Fellow and currently provides technical leadership for the IBM Hursley Innovation Centre. John has a diverse background that includes consultancy, performance, service & product delivery, all underpinned by a passion for innovation. Most recently his work leading the Innovation Centre technologist team has allowed him to combine these interests in order to maximise the potential of new technology while solving real problems. John has overseen the delivery of many cognitive cloud-based solutions and understands how to combine technologies to quickly provide value for customers. John is an active inventor with an invention portfolio spanning mobile, A.I, messaging, integration and predictive analytics.\" , experience : \"Senior Inventor at IBM and Hursley Innovation Labs Technologist Lead\" , education : \"I have studied at University of Humberside, on Field Of StudyInformation Systems. And received a 2:1 Grade\" , gender : 2 } Key Type Description Constraints Default Required _id string User's MongoDb id MongoDb ObjectID Type N/A Yes Other fields N/A Any other changed fields, or full profile N/A N/A No Success The user can be found using the query and can be updated. Status Code : 200 OK Response Body : { \"status\" : \"success\" } User not found or cannot be updated Status Code : 400 Bad Request Response Body : { \"error\" : \"<Error Message>\" }","title":"POST - /profile/update"},{"location":"Profile-API/#create-dummy-profile-data","text":"","title":"Create dummy profile data"},{"location":"Profile-API/#get-profilegenerate","text":"Use this request to generate 3 predefined user profiles (with username : jonmcnamara , amy-pajak , ben-jones respectively). Note To use the dummy profile queried by the usernames above, you must generate it using this request first Query Parameter(s) : None Success Profile generated. Status Code : 200 OK Response Body : { \"status\" : \"success\" }","title":"GET - /profile/generate"}]}